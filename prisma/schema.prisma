datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

// 🆕 通知类型枚举
enum NotificationType {
  NEW_ARTICLE     // 新文章发布
  COMMENT_REPLY   // 评论回复
  SYSTEM          // 系统通知
}

model User {
  id            Int           @id @default(autoincrement())
  username      String        @unique
  email         String        @unique  // 🆕 邮箱登录支持
  password      String
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  
  // 🆕 用户资料字段
  displayName   String?       // 显示名称（可选）
  avatar        String?       // 头像URL（可选）
  lastLoginAt   DateTime?     // 最后登录时间
  
  // 关系
  comments      Comment[]
  likes         ArticleLike[]
  favorites     ArticleFavorite[] // 🆕 用户收藏
  subscriptions NewsSubscription[] // 🆕 新闻订阅
  notifications Notification[]     // 🆕 用户通知
  uploadedMedia MediaFile[]
  passwordResetTokens PasswordResetToken[] // 🆕 密码重置令牌
  
  @@index([email])
  @@index([createdAt])
}

model Article {
  id             Int     @id @default(autoincrement())
  title          String
  slug           String  @unique
  excerpt        String
  content        String
  chineseContent String?
  category       String

  // 🆕 媒体支持字段
  mediaType    String  @default("IMAGE") // 'IMAGE' | 'VIDEO'
  image        String // 保持兼容，主要媒体URL或封面图
  imageAlt     String? // 图片alt文本
  imageCaption String? // 图片说明

  // 🆕 视频专属字段
  videoUrl      String? // 主要视频URL
  videoPoster   String? // 视频封面图
  videoDuration Int? // 视频时长（秒）

  author        String
  publishDate   DateTime      @default(now())
  featured      Boolean       @default(false)
  contentLength Int? // 内容长度（字符数）
  readingTime   Int? // 预估阅读时间（分钟）
  comments      Comment[]
  likes         ArticleLike[]
  favorites     ArticleFavorite[] // 🆕 文章收藏

  @@index([category])
  @@index([featured])
  @@index([publishDate])
  @@index([contentLength])
  @@index([mediaType]) // 🆕 媒体类型索引
  // 🚀 复合索引以优化查询性能
  @@index([featured, publishDate]) // 优化首页特色文章查询
  @@index([category, publishDate]) // 优化分类页面查询
  @@index([mediaType, publishDate]) // 🆕 按媒体类型和发布时间查询
}

model Comment {
  id          Int       @id @default(autoincrement())
  article     Article   @relation(fields: [articleId], references: [id])
  articleId   Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  body        String
  createdAt   DateTime  @default(now())
  
  // 🆕 回复功能支持
  parentId    Int?      // 父评论ID（支持回复）
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  
  @@index([articleId, createdAt])
  @@index([userId])
  @@index([parentId])
}

model ArticleLike {
  id        Int     @id @default(autoincrement())
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now()) // 🆕 记录点赞时间

  @@unique([articleId, userId])
  @@index([createdAt]) // 🆕 点赞历史索引
}

// 🆕 文章收藏模型
model ArticleFavorite {
  id        Int     @id @default(autoincrement())
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now()) // 记录收藏时间

  @@unique([articleId, userId]) // 确保每个用户对每篇文章只能收藏一次
  @@index([createdAt]) // 收藏历史索引
  @@index([userId]) // 用户收藏索引
  @@index([articleId]) // 文章收藏索引
}

// 🆕 媒体文件管理模型
model MediaFile {
  id          Int      @id @default(autoincrement())
  filename    String   // 原始文件名
  url         String   // Supabase存储URL
  path        String   // 存储路径
  
  // 基本信息
  mediaType   String   // 'IMAGE' | 'VIDEO'
  mimeType    String   // image/jpeg, video/mp4
  fileSize    Int      // 文件大小(bytes)
  
  // 元数据（简化版）
  title       String?  // 文件标题
  category    String   @default("misc") // 分类
  
  // 管理信息
  uploadedBy  Int      // 上传者ID (管理员)
  uploader    User     @relation(fields: [uploadedBy], references: [id])
  uploadedAt  DateTime @default(now())
  usageCount  Int      @default(0) // 使用次数
  
  @@index([mediaType])
  @@index([uploadedAt])
  @@index([category])
  @@index([uploadedBy])
}

// 🆕 新闻订阅模型
model NewsSubscription {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  email             String   // 冗余存储邮箱，方便批量发送
  isActive          Boolean  @default(true)
  unsubscribeToken  String   @unique // 取消订阅令牌
  source            String   @default("manual") // 订阅来源: "header", "footer", "homepage", "manual"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([userId]) // 每个用户只能有一个订阅记录
  @@index([isActive])
  @@index([email])
  @@index([unsubscribeToken])
}

// 🆕 邮件发送设置模型
model EmailSettings {
  id          Int      @id @default(autoincrement())
  sendingMode String   @default("daily") // "immediate" | "daily"
  dailyTime   String   @default("09:00") // 24小时制时间
  isEnabled   Boolean  @default(true)
  lastSentAt  DateTime?
  updatedAt   DateTime @updatedAt
  updatedBy   Int      // 更新者ID
  
  @@map("email_settings")
}

// 🆕 邮件发送记录模型
model EmailSendLog {
  id             Int      @id @default(autoincrement())
  sentAt         DateTime @default(now())
  recipientCount Int
  articleIds     Int[]    // PostgreSQL 数组类型
  subject        String
  status         String   @default("sent") // "sent", "failed", "partial"
  errorMessage   String?
  
  @@index([sentAt])
  @@index([status])
  @@map("email_send_log")
}

// 🆕 通知模型（站内通知）
model Notification {
  id        Int              @id @default(autoincrement())
  user      User             @relation(fields: [userId], references: [id])
  userId    Int
  type      NotificationType
  title     String
  content   String
  isRead    Boolean          @default(false)
  relatedId Int?             // 相关内容ID（如文章ID、评论ID）
  createdAt DateTime         @default(now())
  readAt    DateTime?        // 阅读时间
  
  @@index([userId, isRead])
  @@index([createdAt])
  @@index([type])
}

// 🆕 密码重置令牌模型
model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}
