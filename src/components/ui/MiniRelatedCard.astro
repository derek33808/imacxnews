---
import { getRelativeTime } from '../../utils/dateFormatter';
import { getCategoryById } from '../../data/categories';

const { article } = Astro.props;
const category = getCategoryById(article.category);
---

<article class="mini-related-card">
  <a href={`/article/${article.slug}`} class="card-link">
    <div class="image-container">
      <img 
        src={article.image}
        alt={article.title} 
        class="card-image"
        loading="lazy"
        width="200"
        height="120"
      />
      {article.mediaType === 'VIDEO' && (
        <div class="video-overlay">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="white">
            <path d="M5 3l14 9-14 9z"></path>
          </svg>
        </div>
      )}
    </div>
    
    <div class="content">
      <span class={`category-tag ${article.category}`}>
        {(category && category.name) || 'Category'}
      </span>
      
      <h3 class="title">{article.title}</h3>
      
      <div class="meta">
        <span class="date">{getRelativeTime(article.publishDate)}</span>
        <span class="author">{article.author}</span>
      </div>
    </div>
  </a>
</article>

<style>
  .mini-related-card {
    background: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  
  .mini-related-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .card-link {
    display: flex;
    flex-direction: column;
    height: 100%;
    text-decoration: none;
    color: inherit;
  }
  
  .image-container {
    position: relative;
    width: 100%;
    height: 120px;
    overflow: hidden;
    flex-shrink: 0;
  }
  
  .card-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .card-link:hover .card-image {
    transform: scale(1.1);
  }
  
  .video-overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(0, 0, 0, 0.6);
    border-radius: 50%;
    padding: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(4px);
  }
  
  .content {
    padding: var(--space-3);
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  .category-tag {
    font-size: 0.7rem;
    padding: 2px 6px;
    border-radius: var(--radius-sm);
    font-weight: 500;
    margin-bottom: var(--space-2);
    display: inline-block;
    width: fit-content;
  }
  
  .title {
    font-size: 0.9rem;
    line-height: 1.3;
    margin: 0 0 auto 0;
    font-weight: 600;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    flex: 1;
  }
  
  .meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.7rem;
    color: var(--color-text-light);
    margin-top: var(--space-2);
    padding-top: var(--space-2);
    border-top: 1px solid var(--color-border-light);
  }
  
  .author {
    font-weight: 500;
  }
  
  /* 响应式设计 */
  @media (max-width: 768px) {
    .image-container {
      height: 100px;
    }
    
    .title {
      font-size: 0.85rem;
    }
    
    .meta {
      font-size: 0.65rem;
      flex-direction: column;
      align-items: flex-start;
      gap: 2px;
    }
    
    .category-tag {
      font-size: 0.65rem;
      padding: 1px 4px;
    }
  }
  
  @media (max-width: 480px) {
    .content {
      padding: var(--space-2);
    }
    
    .title {
      font-size: 0.8rem;
      -webkit-line-clamp: 3;
    }
  }
</style>
