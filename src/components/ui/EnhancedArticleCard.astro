---
// EnhancedArticleCard.astro - Backward compatible article card with video support
import { getRelativeTime } from '../../utils/dateFormatter';
import { getCategoryById } from '../../data/categories';

const { article, featured = false } = Astro.props;
const category = getCategoryById(article.category);

// Backward compatibility: handle cases where new fields don't exist
const mediaType = article.mediaType || 'IMAGE';
const videoUrl = article.videoUrl || null;
const videoPoster = article.videoPoster || null;
const videoDuration = article.videoDuration || null;
const isVideo = mediaType === 'VIDEO' && videoUrl;

// Format video duration
function formatDuration(seconds: number): string {
  if (!seconds || seconds <= 0) return '';
  const minutes = Math.floor(seconds / 60);
  const secs = Math.floor(seconds % 60);
  return `${minutes}:${secs.toString().padStart(2, '0')}`;
}

const displayImage = isVideo ? (videoPoster || article.image || '/images/placeholder.svg') : article.image;
---

<article class={`article-card enhanced ${featured ? 'featured' : ''} ${isVideo ? 'has-video' : 'has-image'}`}>
  <a href={`/article/${article.slug}`} class="card-image-link">
    <div class="media-container">
      {isVideo ? (
        <!-- Video thumbnail with play overlay -->
        <div class="video-preview">
          <img 
            src={displayImage}
            alt={article.title} 
            class="card-image"
            loading={featured ? "eager" : "lazy"}
            width="400"
            height="225"
            onerror="this.onerror=null; this.src='/images/placeholder.svg'; this.classList.add('error');"
            onload="this.style.opacity='1'"
            style="opacity:0.7; transition: opacity 0.3s ease"
          />
          
          <!-- Video play overlay -->
          <div class="video-overlay">
            <div class="play-button">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polygon points="5,3 19,12 5,21 5,3"/>
              </svg>
            </div>
            {videoDuration && (
              <div class="video-duration">
                {formatDuration(videoDuration)}
              </div>
            )}
          </div>

          <!-- Media type badge -->
          <div class="media-badge video-badge">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polygon points="23 7 16 12 23 17 23 7"/>
              <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
            </svg>
            Video
          </div>
        </div>
      ) : (
        <!-- Regular image -->
        <div class="image-preview">
          {featured ? (
            <img 
              src={article.image}
              alt={article.title} 
              class="card-image"
              loading="eager"
              width="400"
              height="225"
              onerror="this.onerror=null; this.src='/images/placeholder.svg'; this.classList.add('error');"
              onload="this.style.opacity='1'"
              style="opacity:0.7; transition: opacity 0.3s ease"
            />
          ) : (
            <img 
              data-src={article.image}
              src="/images/placeholder.svg"
              alt={article.title} 
              class="card-image lazy"
              loading="lazy"
              width="400"
              height="225"
              onerror="this.onerror=null; this.src='/images/placeholder.svg'; this.classList.add('error');"
              onload="this.style.opacity='1'"
              style="opacity:0.7; transition: opacity 0.3s ease"
            />
          )}

          <!-- Media type badge for images -->
          <div class="media-badge image-badge">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
              <circle cx="8.5" cy="8.5" r="1.5"/>
              <polyline points="21,15 16,10 5,21"/>
            </svg>
            Image
          </div>
        </div>
      )}
    </div>
  </a>
  
  <div class="card-content">
    <div class="card-meta">
      <a href={`/category/${article.category}`} class={`category-tag ${article.category}`}>
        {(category && category.name) || 'Category'}
      </a>
      <span class="publish-date">{getRelativeTime(article.publishDate)}</span>
    </div>
    
    <h3 class="card-title">
      <a href={`/article/${article.slug}`}>{article.title}</a>
    </h3>
    
    <p class="card-excerpt">{article.excerpt}</p>
    
    <div class="card-footer">
      <span class="author">{article.author}</span>
      <a href={`/article/${article.slug}`} class="read-more">
        {isVideo ? 'Watch now' : 'Read more'}
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="5" y1="12" x2="19" y2="12"></line>
          <polyline points="12 5 19 12 12 19"></polyline>
        </svg>
      </a>
    </div>
  </div>
</article>

<style>
  .article-card.enhanced {
    display: block;
    border-radius: var(--radius-lg);
    overflow: hidden;
    background-color: var(--color-background);
    transition: transform var(--transition), box-shadow var(--transition);
    border: 1px solid var(--color-border);
    margin-bottom: var(--space-6);
    position: relative;
  }
  
  .article-card.enhanced:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-md);
  }

  /* Enhanced hover effects for video cards */
  .article-card.enhanced.has-video:hover {
    transform: translateY(-6px);
    box-shadow: var(--shadow-lg);
  }
  
  .card-image-link {
    display: block;
    width: 100%;
    margin-bottom: var(--space-4);
    aspect-ratio: 16 / 9;
    overflow: hidden;
    border-radius: var(--radius-md);
    position: relative;
  }

  .media-container {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .image-preview,
  .video-preview {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  .card-image {
    width: 100%;
    height: 100%;
    transition: transform 0.5s ease;
    border-radius: var(--radius-md);
    object-fit: cover;
  }
  
  .article-card.enhanced:hover .card-image {
    transform: scale(1.05);
  }

  /* Video overlay styles */
  .video-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
    border-radius: var(--radius-md);
  }

  .article-card.enhanced.has-video:hover .video-overlay {
    opacity: 1;
  }

  .play-button {
    width: 60px;
    height: 60px;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-primary);
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .play-button:hover {
    transform: scale(1.1);
    background: white;
  }

  .play-button svg {
    margin-left: 2px; /* Optical centering for play icon */
  }

  .video-duration {
    position: absolute;
    bottom: var(--space-2);
    right: var(--space-2);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: var(--space-1) var(--space-2);
    border-radius: var(--radius-sm);
    font-size: 0.75rem;
    font-weight: 600;
    font-family: monospace;
  }

  /* Media type badges */
  .media-badge {
    position: absolute;
    top: var(--space-2);
    left: var(--space-2);
    padding: var(--space-1) var(--space-2);
    border-radius: var(--radius-sm);
    font-size: 0.625rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    display: flex;
    align-items: center;
    gap: var(--space-1);
    backdrop-filter: blur(8px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
  }

  .video-badge {
    background: rgba(139, 92, 246, 0.9);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .image-badge {
    background: rgba(34, 197, 94, 0.9);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .article-card.enhanced:hover .media-badge {
    transform: scale(1.05);
  }
  
  .card-content {
    padding: var(--space-4);
  }
  
  .card-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-3);
  }
  
  .publish-date {
    font-size: 0.875rem;
    color: var(--color-text-light);
  }
  
  .card-title {
    font-size: 1.25rem;
    margin-bottom: var(--space-3);
    line-height: 1.3;
  }
  
  .card-title a {
    color: var(--color-text);
    text-decoration: none;
    transition: color var(--transition);
  }
  
  .card-title a:hover {
    color: var(--color-primary);
  }
  
  .card-excerpt {
    font-size: 0.9375rem;
    color: var(--color-text-light);
    margin-bottom: var(--space-4);
    line-height: 1.6;
  }
  
  .card-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.875rem;
  }
  
  .author {
    color: var(--color-text-light);
    font-weight: 500;
  }
  
  .read-more {
    display: flex;
    align-items: center;
    gap: var(--space-1);
    color: var(--color-primary);
    font-weight: 500;
    transition: gap var(--transition);
    text-decoration: none;
  }
  
  .read-more:hover {
    gap: var(--space-2);
  }

  /* Enhanced styles for video cards */
  .article-card.enhanced.has-video .read-more {
    background: var(--color-primary);
    color: white;
    padding: var(--space-2) var(--space-3);
    border-radius: var(--radius-sm);
    transition: all var(--transition);
  }

  .article-card.enhanced.has-video .read-more:hover {
    background: var(--color-primary-dark);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  /* Featured article enhancements */
  .article-card.enhanced.featured {
    border: 2px solid var(--color-primary);
    box-shadow: 0 8px 24px rgba(var(--color-primary-rgb), 0.15);
  }

  .article-card.enhanced.featured::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--color-primary), var(--color-primary-light), var(--color-primary));
  }

  /* Responsive design */
  @media (max-width: 640px) {
    .card-content {
      padding: var(--space-3);
    }

    .card-title {
      font-size: 1.125rem;
    }

    .play-button {
      width: 48px;
      height: 48px;
    }

    .play-button svg {
      width: 20px;
      height: 20px;
    }

    .video-duration {
      font-size: 0.625rem;
    }

    .media-badge {
      font-size: 0.5rem;
      padding: 2px var(--space-1);
    }

    .card-footer {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-2);
    }

    .article-card.enhanced.has-video .read-more {
      padding: var(--space-2) var(--space-4);
      font-size: 0.9375rem;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .video-overlay {
      background: rgba(0, 0, 0, 0.5);
    }

    .play-button {
      background: rgba(15, 23, 42, 0.95);
      color: var(--color-primary);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .play-button:hover {
      background: rgba(15, 23, 42, 1);
      border-color: var(--color-primary);
    }

    .video-badge {
      background: rgba(139, 92, 246, 0.8);
      border-color: rgba(255, 255, 255, 0.1);
    }

    .image-badge {
      background: rgba(34, 197, 94, 0.8);
      border-color: rgba(255, 255, 255, 0.1);
    }

    .article-card.enhanced.has-video .read-more {
      background: var(--color-primary);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .article-card.enhanced.has-video .read-more:hover {
      border-color: rgba(255, 255, 255, 0.2);
    }
  }
</style>

<script is:inline>
  // Enhanced Article Card Interactions
  document.addEventListener('DOMContentLoaded', function() {
    const videoCards = document.querySelectorAll('.article-card.enhanced.has-video');
    
    videoCards.forEach(card => {
      const overlay = card.querySelector('.video-overlay');
      const playButton = card.querySelector('.play-button');
      
      if (overlay && playButton) {
        // Add click event to play button for better UX indication
        playButton.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          // Add a ripple effect
          playButton.style.transform = 'scale(0.95)';
          setTimeout(() => {
            playButton.style.transform = 'scale(1.1)';
            setTimeout(() => {
              // Navigate to article
              window.location.href = card.querySelector('a').href;
            }, 100);
          }, 100);
        });

        // Enhanced hover effects
        card.addEventListener('mouseenter', () => {
          overlay.style.opacity = '1';
          playButton.style.transform = 'scale(1.05)';
        });

        card.addEventListener('mouseleave', () => {
          overlay.style.opacity = '0';
          playButton.style.transform = 'scale(1)';
        });
      }
    });

    // Enhanced lazy loading for non-featured images
    const lazyImages = document.querySelectorAll('.article-card.enhanced img.lazy');
    
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            img.src = img.dataset.src;
            img.classList.remove('lazy');
            imageObserver.unobserve(img);
          }
        });
      });

      lazyImages.forEach(img => imageObserver.observe(img));
    } else {
      // Fallback for browsers without IntersectionObserver
      lazyImages.forEach(img => {
        img.src = img.dataset.src;
        img.classList.remove('lazy');
      });
    }
  });
</script>
