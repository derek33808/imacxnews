---
// MediaUploader.astro - Professional media uploader for IMACXNews
---

<div class="media-uploader" id="mediaUploader">
  <!-- Upload Type Selection -->
  <div class="upload-type-section">
    <h3 class="section-title">Select Media Type</h3>
    <div class="type-selector">
      <label class="type-option active" data-type="image">
        <input type="radio" name="uploadType" value="image" checked>
        <div class="option-content">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
            <circle cx="8.5" cy="8.5" r="1.5"/>
            <path d="M21 15l-5-5-11 11"/>
          </svg>
          <span>Image</span>
        </div>
      </label>
      <label class="type-option" data-type="video">
        <input type="radio" name="uploadType" value="video">
        <div class="option-content">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M23 7l-7 5 7 5z"/>
            <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
          </svg>
          <span>Video</span>
        </div>
      </label>
    </div>
  </div>

  <!-- Upload Zone -->
  <div class="upload-zone" id="uploadZone">
    <input type="file" id="fileInput" accept="image/*" hidden>
    <div class="upload-content">
      <div class="upload-icon">
        <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
          <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-15"/>
          <path d="M7 10l5 5 5-5"/>
          <rect x="15" y="3" width="4" height="12"/>
        </svg>
      </div>
      <div class="upload-text">
        <p class="primary-text">Drop files here or click to upload</p>
        <p class="secondary-text">Supports JPG, PNG, GIF, WebP, MP4, WebM</p>
        <p class="limits-text">Max: 10MB for images, 50MB for videos</p>
      </div>
    </div>
  </div>

  <!-- Upload Progress -->
  <div class="progress-container" id="progressContainer" style="display: none;">
    <div class="progress-bar">
      <div class="progress-fill" id="progressFill"></div>
    </div>
    <div class="progress-info">
      <span class="progress-text" id="progressText">Uploading...</span>
      <span class="progress-percentage" id="progressPercentage">0%</span>
    </div>
  </div>

  <!-- Upload Result -->
  <div class="upload-result" id="uploadResult" style="display: none;">
    <!-- Image Result -->
    <div class="result-preview image-result" id="imageResult" style="display: none;">
      <div class="preview-container">
        <img id="resultImage" src="" alt="Uploaded image" class="result-media">
        <div class="media-overlay">
          <div class="media-type-badge">Image</div>
        </div>
      </div>
      <div class="result-info">
        <h4 class="result-title" id="imageTitle"></h4>
        <div class="result-details">
          <span class="detail-item" id="imageSize"></span>
          <span class="detail-item" id="imageType"></span>
        </div>
        <!-- Hidden inputs for form submission -->
        <input type="hidden" name="mediaUrl" id="imageUrl">
        <input type="hidden" name="mediaType" value="IMAGE">
      </div>
    </div>

    <!-- Video Result -->
    <div class="result-preview video-result" id="videoResult" style="display: none;">
      <div class="preview-container">
        <video id="resultVideo" class="result-media" controls poster="">
          <source id="videoSource" src="" type="">
          Your browser does not support video playback.
        </video>
        <div class="media-overlay">
          <div class="media-type-badge">Video</div>
          <div class="video-duration" id="videoDurationBadge"></div>
        </div>
      </div>
      <div class="result-info">
        <h4 class="result-title" id="videoTitle"></h4>
        <div class="result-details">
          <span class="detail-item" id="videoSize"></span>
          <span class="detail-item" id="videoType"></span>
          <span class="detail-item" id="videoDuration"></span>
        </div>
        <!-- Hidden inputs for form submission -->
        <input type="hidden" name="mediaUrl" id="videoUrl">
        <input type="hidden" name="videoPoster" id="videoPoster">
        <input type="hidden" name="videoDuration" id="videoDurationValue">
        <input type="hidden" name="mediaType" value="VIDEO">
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="result-actions">
      <button type="button" class="btn btn-secondary" id="removeBtn">Remove</button>
      <button type="button" class="btn btn-primary" id="uploadAnotherBtn">Upload Another</button>
    </div>
  </div>

  <!-- Error Display -->
  <div class="error-message" id="errorMessage" style="display: none;">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="12" cy="12" r="10"/>
      <line x1="15" y1="9" x2="9" y2="15"/>
      <line x1="9" y1="9" x2="15" y2="15"/>
    </svg>
    <span id="errorText"></span>
  </div>
</div>

<style>
  .media-uploader {
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
    background-color: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    overflow: hidden;
  }

  .upload-type-section {
    padding: var(--space-6);
    border-bottom: 1px solid var(--color-border);
  }

  .section-title {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: var(--space-4);
    color: var(--color-text);
  }

  .type-selector {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-3);
  }

  .type-option {
    cursor: pointer;
    border-radius: var(--radius-md);
    border: 2px solid var(--color-border);
    background-color: var(--color-background);
    transition: all var(--transition);
    overflow: hidden;
  }

  .type-option input {
    display: none;
  }

  .type-option.active {
    border-color: var(--color-primary);
    background-color: rgba(var(--color-primary-rgb), 0.05);
  }

  .option-content {
    padding: var(--space-4);
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-2);
  }

  .type-option svg {
    color: var(--color-text-light);
    transition: color var(--transition);
  }

  .type-option.active svg {
    color: var(--color-primary);
  }

  .type-option span {
    font-weight: 500;
    color: var(--color-text);
  }

  .upload-zone {
    padding: var(--space-6);
    cursor: pointer;
    transition: background-color var(--transition);
  }

  .upload-zone:hover {
    background-color: var(--color-background-alt);
  }

  .upload-zone.dragover {
    background-color: rgba(var(--color-primary-rgb), 0.1);
    border-color: var(--color-primary);
  }

  .upload-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: var(--space-8) var(--space-4);
    border: 2px dashed var(--color-border);
    border-radius: var(--radius-md);
    transition: all var(--transition);
  }

  .upload-zone:hover .upload-content {
    border-color: var(--color-primary);
  }

  .upload-icon {
    margin-bottom: var(--space-4);
    color: var(--color-text-light);
  }

  .primary-text {
    font-size: 1.125rem;
    font-weight: 500;
    margin-bottom: var(--space-2);
    color: var(--color-text);
  }

  .secondary-text {
    font-size: 0.9375rem;
    margin-bottom: var(--space-1);
    color: var(--color-text-light);
  }

  .limits-text {
    font-size: 0.875rem;
    color: var(--color-text-light);
    opacity: 0.8;
  }

  .progress-container {
    padding: var(--space-4) var(--space-6);
    background-color: var(--color-background-alt);
    border-top: 1px solid var(--color-border);
  }

  .progress-bar {
    width: 100%;
    height: 8px;
    background-color: var(--color-border);
    border-radius: var(--radius-sm);
    overflow: hidden;
    margin-bottom: var(--space-2);
  }

  .progress-fill {
    height: 100%;
    background-color: var(--color-primary);
    border-radius: var(--radius-sm);
    transition: width 0.3s ease;
    width: 0%;
  }

  .progress-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.875rem;
    color: var(--color-text-light);
  }

  .upload-result {
    padding: var(--space-6);
    border-top: 1px solid var(--color-border);
  }

  .result-preview {
    display: flex;
    gap: var(--space-4);
    margin-bottom: var(--space-4);
    padding: var(--space-4);
    background-color: var(--color-background-alt);
    border-radius: var(--radius-md);
    border: 1px solid var(--color-border);
  }

  .preview-container {
    position: relative;
    flex-shrink: 0;
  }

  .result-media {
    width: 120px;
    height: 80px;
    object-fit: cover;
    border-radius: var(--radius-sm);
    border: 1px solid var(--color-border);
  }

  .media-overlay {
    position: absolute;
    top: var(--space-1);
    right: var(--space-1);
    display: flex;
    flex-direction: column;
    gap: var(--space-1);
    align-items: flex-end;
  }

  .media-type-badge {
    background-color: var(--color-primary);
    color: white;
    padding: var(--space-1) var(--space-2);
    border-radius: var(--radius-sm);
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .video-duration {
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: var(--space-1) var(--space-2);
    border-radius: var(--radius-sm);
    font-size: 0.75rem;
    font-weight: 500;
    font-family: monospace;
  }

  .result-info {
    flex: 1;
    min-width: 0;
  }

  .result-title {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: var(--space-2);
    color: var(--color-text);
    word-break: break-word;
  }

  .result-details {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-3);
  }

  .detail-item {
    font-size: 0.875rem;
    color: var(--color-text-light);
    background-color: var(--color-background);
    padding: var(--space-1) var(--space-2);
    border-radius: var(--radius-sm);
    border: 1px solid var(--color-border);
  }

  .result-actions {
    display: flex;
    gap: var(--space-3);
    justify-content: center;
  }

  .btn {
    padding: var(--space-3) var(--space-6);
    border-radius: var(--radius-md);
    font-size: 0.9375rem;
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition);
    border: 1px solid;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 120px;
  }

  .btn-primary {
    background-color: var(--color-primary);
    border-color: var(--color-primary);
    color: white;
  }

  .btn-primary:hover {
    background-color: var(--color-primary-dark);
    border-color: var(--color-primary-dark);
  }

  .btn-secondary {
    background-color: var(--color-background);
    border-color: var(--color-border);
    color: var(--color-text);
  }

  .btn-secondary:hover {
    background-color: var(--color-background-alt);
    border-color: var(--color-text-light);
  }

  .error-message {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    padding: var(--space-4) var(--space-6);
    background-color: #fef2f2;
    border-top: 1px solid #fecaca;
    color: #dc2626;
    font-size: 0.9375rem;
    font-weight: 500;
  }

  .error-message svg {
    flex-shrink: 0;
    color: #f87171;
  }

  /* Responsive Design */
  @media (max-width: 640px) {
    .media-uploader {
      margin: 0;
      border-radius: var(--radius-md);
    }

    .upload-type-section,
    .upload-zone,
    .upload-result {
      padding: var(--space-4);
    }

    .type-selector {
      grid-template-columns: 1fr;
    }

    .upload-content {
      padding: var(--space-6) var(--space-2);
    }

    .result-preview {
      flex-direction: column;
      text-align: center;
    }

    .result-media {
      width: 100%;
      max-width: 200px;
      height: auto;
      aspect-ratio: 16/9;
    }

    .result-actions {
      flex-direction: column;
    }

    .btn {
      width: 100%;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .error-message {
      background-color: rgba(220, 38, 38, 0.1);
      border-top-color: rgba(220, 38, 38, 0.3);
      color: #fca5a5;
    }

    .error-message svg {
      color: #ef4444;
    }

    .media-type-badge {
      background-color: var(--color-primary);
    }
  }
</style>

<script is:inline>
// Professional Media Uploader Script
document.addEventListener('DOMContentLoaded', function() {
  const uploader = document.getElementById('mediaUploader');
  if (!uploader) return;

  // Elements
  const typeOptions = uploader.querySelectorAll('.type-option');
  const fileInput = uploader.querySelector('#fileInput');
  const uploadZone = uploader.querySelector('#uploadZone');
  const progressContainer = uploader.querySelector('#progressContainer');
  const progressFill = uploader.querySelector('#progressFill');
  const progressText = uploader.querySelector('#progressText');
  const progressPercentage = uploader.querySelector('#progressPercentage');
  const uploadResult = uploader.querySelector('#uploadResult');
  const errorMessage = uploader.querySelector('#errorMessage');
  const errorText = uploader.querySelector('#errorText');

  // Result elements
  const imageResult = uploader.querySelector('#imageResult');
  const videoResult = uploader.querySelector('#videoResult');
  const removeBtn = uploader.querySelector('#removeBtn');
  const uploadAnotherBtn = uploader.querySelector('#uploadAnotherBtn');

  // State
  let currentType = 'image';

  // Initialize
  init();

  function init() {
    setupTypeSelection();
    setupUploadZone();
    setupButtons();
    updateFileAccept();
  }

  function setupTypeSelection() {
    typeOptions.forEach(option => {
      option.addEventListener('click', () => {
        const type = option.dataset.type;
        selectType(type);
      });
    });
  }

  function selectType(type) {
    currentType = type;
    
    // Update UI
    typeOptions.forEach(option => {
      option.classList.toggle('active', option.dataset.type === type);
      const input = option.querySelector('input');
      input.checked = option.dataset.type === type;
    });

    updateFileAccept();
  }

  function updateFileAccept() {
    if (currentType === 'image') {
      fileInput.accept = 'image/*';
    } else if (currentType === 'video') {
      fileInput.accept = 'video/*';
    }
  }

  function setupUploadZone() {
    // Click to upload
    uploadZone.addEventListener('click', () => {
      fileInput.click();
    });

    // File selection
    fileInput.addEventListener('change', (e) => {
      if (e.target.files.length > 0) {
        handleFile(e.target.files[0]);
      }
    });

    // Drag and drop
    uploadZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadZone.classList.add('dragover');
    });

    uploadZone.addEventListener('dragleave', () => {
      uploadZone.classList.remove('dragover');
    });

    uploadZone.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadZone.classList.remove('dragover');
      
      if (e.dataTransfer.files.length > 0) {
        handleFile(e.dataTransfer.files[0]);
      }
    });
  }

  function setupButtons() {
    removeBtn?.addEventListener('click', resetUploader);
    uploadAnotherBtn?.addEventListener('click', resetUploader);
  }

  function resetUploader() {
    hideResult();
    hideError();
    hideProgress();
    fileInput.value = '';
  }

  function handleFile(file) {
    hideError();
    
    // Validate file type
    const isImage = file.type.startsWith('image/');
    const isVideo = file.type.startsWith('video/');
    
    if (currentType === 'image' && !isImage) {
      showError('Please select an image file');
      return;
    }
    
    if (currentType === 'video' && !isVideo) {
      showError('Please select a video file');
      return;
    }

    uploadFile(file);
  }

  async function uploadFile(file) {
    try {
      showProgress();
      
      const formData = new FormData();
      formData.append('file', file);
      formData.append('category', 'TodayNews');

      // Simulate progress
      let progress = 0;
      const progressInterval = setInterval(() => {
        progress += Math.random() * 15;
        if (progress > 85) progress = 85;
        updateProgress(progress);
      }, 200);

      const response = await fetch('/api/media/simple-upload', {
        method: 'POST',
        body: formData
      });

      clearInterval(progressInterval);
      updateProgress(100);

      const result = await response.json();

      if (response.ok) {
        setTimeout(() => {
          hideProgress();
          showResult(result.data, file);
        }, 500);
      } else {
        throw new Error(result.error || 'Upload failed');
      }

    } catch (error) {
      console.error('Upload error:', error);
      hideProgress();
      showError(error.message || 'Upload failed. Please try again.');
    }
  }

  function showProgress() {
    progressContainer.style.display = 'block';
    hideResult();
    hideError();
  }

  function updateProgress(percentage) {
    progressFill.style.width = percentage + '%';
    progressPercentage.textContent = Math.round(percentage) + '%';
    
    if (percentage < 30) {
      progressText.textContent = 'Uploading...';
    } else if (percentage < 80) {
      progressText.textContent = 'Processing...';
    } else {
      progressText.textContent = 'Finalizing...';
    }
  }

  function hideProgress() {
    progressContainer.style.display = 'none';
  }

  function showResult(data, file) {
    uploadResult.style.display = 'block';
    
    if (data.type === 'image') {
      showImageResult(data, file);
    } else if (data.type === 'video') {
      showVideoResult(data, file);
    }
  }

  function showImageResult(data, file) {
    imageResult.style.display = 'flex';
    videoResult.style.display = 'none';
    
    const resultImage = uploader.querySelector('#resultImage');
    const imageTitle = uploader.querySelector('#imageTitle');
    const imageSize = uploader.querySelector('#imageSize');
    const imageType = uploader.querySelector('#imageType');
    const imageUrl = uploader.querySelector('#imageUrl');
    
    resultImage.src = data.url;
    imageTitle.textContent = data.originalName;
    imageSize.textContent = formatFileSize(data.size);
    imageType.textContent = file.type;
    imageUrl.value = data.url;
  }

  function showVideoResult(data, file) {
    videoResult.style.display = 'flex';
    imageResult.style.display = 'none';
    
    const resultVideo = uploader.querySelector('#resultVideo');
    const videoSource = uploader.querySelector('#videoSource');
    const videoTitle = uploader.querySelector('#videoTitle');
    const videoSize = uploader.querySelector('#videoSize');
    const videoType = uploader.querySelector('#videoType');
    const videoDuration = uploader.querySelector('#videoDuration');
    const videoDurationBadge = uploader.querySelector('#videoDurationBadge');
    const videoUrl = uploader.querySelector('#videoUrl');
    const videoPoster = uploader.querySelector('#videoPoster');
    const videoDurationValue = uploader.querySelector('#videoDurationValue');
    
    videoSource.src = data.url;
    videoSource.type = file.type;
    resultVideo.poster = data.url; // Will be updated with thumbnail
    resultVideo.load();
    
    videoTitle.textContent = data.originalName;
    videoSize.textContent = formatFileSize(data.size);
    videoType.textContent = file.type;
    videoUrl.value = data.url;
    
    // Generate thumbnail and get duration
    generateVideoThumbnail(resultVideo, (thumbnailUrl, duration) => {
      if (thumbnailUrl) {
        resultVideo.poster = thumbnailUrl;
        videoPoster.value = thumbnailUrl;
      }
      if (duration) {
        const formattedDuration = formatDuration(duration);
        videoDuration.textContent = formattedDuration;
        videoDurationBadge.textContent = formattedDuration;
        videoDurationValue.value = Math.round(duration);
      }
    });
  }

  function generateVideoThumbnail(video, callback) {
    video.addEventListener('loadedmetadata', function() {
      const duration = video.duration;
      video.currentTime = Math.min(1, duration * 0.1);
      
      video.addEventListener('seeked', function() {
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        
        const thumbnailUrl = canvas.toDataURL('image/jpeg', 0.8);
        callback(thumbnailUrl, duration);
      }, { once: true });
    });
  }

  function hideResult() {
    uploadResult.style.display = 'none';
  }

  function showError(message) {
    errorText.textContent = message;
    errorMessage.style.display = 'flex';
    setTimeout(hideError, 5000);
  }

  function hideError() {
    errorMessage.style.display = 'none';
  }

  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  function formatDuration(seconds) {
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  }
});
</script>
