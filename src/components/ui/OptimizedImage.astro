---
// 优化的图片组件，支持懒加载和响应式图片
export interface Props {
  src: string;
  alt: string;
  caption?: string;
  slug?: string;
  loading?: 'lazy' | 'eager';
  sizes?: string;
  class?: string;
  width?: number;
  height?: number;
}

const { 
  src, 
  alt, 
  caption, 
  slug,
  loading = 'lazy', 
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  class: className = '',
  width,
  height
} = Astro.props;

// 判断是否为外部图片
const isExternal = src.startsWith('http://') || src.startsWith('https://');

// 生成响应式图片路径
const generateThumbnailPath = (slug: string, size: string) => 
  `/images/thumbnails/${size}/${slug}-thumb.webp`;

// 暂时禁用 srcSet 以避免缩略图404错误
const srcSet = undefined;

const imgClass = `${className} ${loading === 'lazy' ? 'lazy' : ''} transition-opacity duration-300`.trim();
---

<figure class="image-container">
  {loading === 'lazy' ? (
    <img
      data-src={src}
      src="/images/placeholder.svg"
      alt={alt}
      class={imgClass}
      width={width}
      height={height}
      loading="lazy"
    />
  ) : (
    <img
      src={src}
      alt={alt}
      class={imgClass}
      width={width}
      height={height}
      loading="eager"
    />
  )}
  
  {caption && (
    <figcaption class="image-caption">
      {caption}
    </figcaption>
  )}
</figure>

<!-- 🚀 懒加载JavaScript实现 -->
<script>
  // 使用Intersection Observer实现懒加载
  if ('IntersectionObserver' in window) {
    const lazyImageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          const src = img.dataset.src;
          
          if (src) {
            img.src = src;
            img.classList.add('loaded');
            img.removeAttribute('data-src');
            observer.unobserve(img);
          }
        }
      });
    }, {
      rootMargin: '50px' // 提前50px开始加载
    });

    // 观察当前组件中的懒加载图片
    document.addEventListener('DOMContentLoaded', () => {
      const lazyImages = document.querySelectorAll('img[data-src]');
      lazyImages.forEach(img => lazyImageObserver.observe(img));
    });
  } else {
    // 降级处理：直接加载所有图片
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('img[data-src]').forEach(img => {
        const lazyImg = img as HTMLImageElement;
        if (lazyImg.dataset.src) {
          lazyImg.src = lazyImg.dataset.src;
          lazyImg.removeAttribute('data-src');
          lazyImg.classList.add('loaded');
        }
      });
    });
  }
</script>

<style>
  .image-container {
    position: relative;
    overflow: hidden;
  }
  
  .image-container img {
    width: 100%;
    height: auto;
    object-fit: cover;
    transition: opacity 0.3s ease;
  }
  
  .image-container img.lazy {
    opacity: 0;
  }
  
  .image-container img.loaded {
    opacity: 1;
  }
  
  .image-caption {
    font-size: 0.875rem;
    color: #6b7280;
    margin-top: 0.5rem;
    text-align: center;
    font-style: italic;
    padding: 0 0.5rem;
  }
  
  /* 占位符效果 */
  .image-container img[data-src] {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }
  
  @keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }
</style>
