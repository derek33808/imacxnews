---
import Navigation from './Navigation.astro';
import SearchBar from './SearchBar.astro';
import ThemeToggle from './ThemeToggle.astro';
---

<header class="site-header">
  <div class="container">
    <div class="header-content">
      <div class="logo">
        <a href="/" aria-label="Go to homepage">
          <span class="logo-text">IMACX</span><span class="logo-accent">News</span>
        </a>
      </div>
      
      <!-- Admin manage button -->
      <button class="admin-manage-btn" id="adminManageBtn" style="display: none;">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
        </svg>
        Admin Manage
      </button>
      
      <Navigation />
      
      <div class="header-actions">
        <SearchBar />
        
        <!-- Newsletter Subscribe Button -->
        <button class="newsletter-subscribe-btn" id="headerNewsletterBtn" title="Subscribe to our newsletter">
          <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
            <polyline points="22,6 12,13 2,6"></polyline>
          </svg>
          <span class="newsletter-btn-text">Newsletter</span>
        </button>
        
        <div class="user-menu" id="userMenu">
          <!-- 未登录状态按钮组 -->
          <div class="auth-buttons" id="authButtons">
            <button class="register-btn" id="registerBtn">Sign Up</button>
            <button class="login-btn" id="loginBtn">Login</button>
          </div>
          
          <!-- 已登录用户菜单 -->
          <div class="user-dropdown" id="userDropdown">
          <!-- 用户信息（始终显示） -->
          <div class="user-info" id="userInfo">
            <div class="user-avatar" id="headerUserAvatar">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                <circle cx="12" cy="7" r="4"></circle>
              </svg>
            </div>
              <div class="user-details">
                <span class="user-name" id="userName">User</span>
                <span class="user-role" id="userRole">Member</span>
              </div>
              <div class="dropdown-arrow">
                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="6,9 12,15 18,9"></polyline>
                </svg>
              </div>
            </div>
            
            <!-- 下拉菜单内容（点击时显示） -->
            <div class="dropdown-content" id="dropdownContent">
              <button class="dropdown-item profile-btn" id="profileBtn">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                  <circle cx="12" cy="7" r="4"></circle>
                </svg>
                Profile Settings
              </button>
              <a class="dropdown-item favorites-link" href="/favorites" id="favoritesLink">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
                </svg>
                My Favorites
              </a>
              <button class="dropdown-item admin-users-btn" id="adminUsersBtn" style="display: none;">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M17 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                  <circle cx="9" cy="7" r="4"></circle>
                  <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                  <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                </svg>
                User Management
              </button>
              <button class="dropdown-item admin-newsletter-btn" id="adminNewsletterBtn" style="display: none;">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                  <polyline points="22,6 12,13 2,6"></polyline>
                </svg>
                Newsletter Management
              </button>
              <div class="dropdown-divider"></div>
              <button class="dropdown-item logout-btn" id="logoutBtn">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                  <path d="M16 17l5-5-5-5"></path>
                  <line x1="21" y1="12" x2="9" y2="12"></line>
                </svg>
                Logout
              </button>
            </div>
          </div>
        </div>
        <ThemeToggle />
      </div>
    </div>
    
  </div>
</header>

<style>
  .site-header {
    padding: var(--space-4) 0;
    border-bottom: 1px solid var(--color-border);
    position: relative;
    background-color: var(--color-background);
    z-index: 100;
    transition: 
      background-color var(--transition),
      border-color var(--transition);
  }
  
  .header-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: var(--space-4);
  }
  
  .logo a {
    display: flex;
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-text);
    text-decoration: none;
    transition: color var(--transition);
  }
  
  .logo-text {
    font-weight: 400;
  }
  
  .logo-accent {
    color: var(--color-primary);
  }
  
  /* Admin manage button */
  .admin-manage-btn {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    padding: var(--space-3) var(--space-4);
    background-color: var(--color-primary);
    color: white;
    border: none;
    border-radius: var(--radius-lg);
    font-weight: 600;
    font-size: 0.95rem;
    cursor: pointer;
    transition: all var(--transition);
    box-shadow: var(--shadow-md);
  }
  
  .admin-manage-btn:hover {
    background-color: var(--color-primary-light);
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(26, 115, 232, 0.4);
  }
  
  .header-actions {
    display: flex;
    align-items: center;
    gap: var(--space-3);
  }
  
  .login-btn {
    padding: var(--space-2) var(--space-4);
    background-color: transparent;
    color: var(--color-primary);
    border: 2px solid var(--color-primary);
    border-radius: var(--radius-md);
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition);
  }
  
  .login-btn:hover {
    background-color: var(--color-primary);
    color: white;
  }
  
  /* 🆕 新增注册按钮样式 */
  .register-btn {
    padding: var(--space-2) var(--space-4);
    border: 2px solid var(--color-primary);
    background-color: var(--color-primary);
    color: white;
    border-radius: var(--radius-md);
    font-size: 0.875rem;
    font-weight: 500;
    text-decoration: none;
    cursor: pointer;
    transition: all var(--transition);
    margin-right: var(--space-2);
  }
  
  .register-btn:hover {
    background-color: var(--color-primary-light);
    border-color: var(--color-primary-light);
  }
  
  /* 🆕 认证按钮组样式 */
  .auth-buttons {
    display: flex;
    align-items: center;
    gap: var(--space-2);
  }
  
  .auth-buttons.hidden {
    display: none !important;
  }
  
  .user-menu {
    position: relative;
  }
  
  .user-dropdown {
    position: relative;
    display: none; /* 默认隐藏整个用户菜单 */
  }
  
  .user-dropdown.show {
    display: block !important; /* 用户登录时显示 */
  }
  
  .user-info {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    padding: var(--space-2) var(--space-3);
    cursor: pointer;
    border-radius: var(--radius-md);
    transition: background-color 0.2s ease;
  }
  
  .user-info:hover {
    background-color: var(--color-surface);
  }
  
  .dropdown-content {
    position: absolute;
    top: 100%;
    right: 0;
    background-color: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    box-shadow: var(--shadow-lg);
    min-width: 200px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: opacity 0.2s ease, visibility 0.2s ease, transform 0.2s ease;
    z-index: 1000;
    margin-top: var(--space-1);
    display: none; /* 默认隐藏下拉内容 */
  }
  
  .user-dropdown.active .dropdown-content {
    display: block;
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .dropdown-arrow {
    margin-left: auto;
    transition: transform 0.2s ease;
  }
  
  .user-dropdown.active .dropdown-arrow {
    transform: rotate(180deg);
  }
  
  /* 用户信息样式已在上面定义 */
  
  .user-avatar {
    width: 40px;
    height: 40px;
    background-color: var(--color-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }
  
  .user-details {
    display: flex;
    flex-direction: column;
  }
  
  .user-name {
    font-weight: 600;
    color: var(--color-text);
    font-size: 0.875rem;
  }
  
  .user-role {
    font-size: 0.75rem;
    color: var(--color-text-light);
  }
  
  .dropdown-divider {
    height: 1px;
    background-color: var(--color-border);
    margin: 0 var(--space-2);
  }
  
  .dropdown-item {
    width: 100%;
    display: flex;
    align-items: center;
    gap: var(--space-2);
    padding: var(--space-3) var(--space-4);
    background: none;
    border: none;
    color: var(--color-text);
    font-size: 0.875rem;
    cursor: pointer;
    transition: background-color var(--transition);
    text-align: left;
    text-decoration: none;
    font-family: inherit;
  }
  
  .dropdown-item:hover {
    background-color: var(--color-background-alt);
  }
  
  .logout-btn {
    color: #dc2626;
  }
  
  .logout-btn:hover {
    background-color: rgba(220, 38, 38, 0.1);
  }
  
  
  /* Header Newsletter Subscribe Button Styles */
  .newsletter-subscribe-btn {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    padding: var(--space-2) var(--space-3);
    background-color: var(--color-primary);
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-weight: 500;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all var(--transition);
    box-shadow: var(--shadow-sm);
    white-space: nowrap;
  }
  
  .newsletter-subscribe-btn:hover {
    background-color: var(--color-primary-light);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }
  
  .newsletter-subscribe-btn.subscribed {
    background-color: #10b981;
    color: white;
  }
  
  .newsletter-subscribe-btn.subscribed:hover {
    background-color: #059669;
  }
  
  .newsletter-btn-text {
    display: inline;
  }
  
  /* Admin Bar Styles */
  @media (max-width: 768px) {
    .header-content {
      gap: var(--space-3);
    }
    
    .header-actions {
      gap: var(--space-2);
    }
    
    .admin-manage-btn {
      padding: var(--space-2) var(--space-3);
      font-size: 0.875rem;
    }
    
    /* Newsletter button mobile styles */
    .newsletter-subscribe-btn {
      padding: var(--space-2);
      font-size: 0.8rem;
    }
    
    .newsletter-btn-text {
      display: none; /* Hide text on mobile, show only icon */
    }
  }
  
  @media (max-width: 480px) {
    .newsletter-subscribe-btn {
      min-width: 40px;
      justify-content: center;
    }
  }
</style>

<script>
  // 类型声明
  declare global {
    interface Window {
      openUserLoginModal: () => void;
      openRegisterModal: () => void;
      openAdminManagerModal: () => void;
      openUserProfileModal: () => void;
      openAdminUsersModal: () => void;
      updateHeaderForUser: (userData: any) => void;
      updateHeaderForAdmin: (username: string) => void;
      updateHeaderForLoggedOut: () => void;
      checkUserStatus: () => Promise<void>;
      closeUserLoginModal: () => void;
    }
  }

  // Header scroll behavior
  const header = document.querySelector('.site-header') as HTMLElement;
  let lastScrollY = window.scrollY;
  
  window.addEventListener('scroll', () => {
    if (window.scrollY > 100) {
      header?.classList.add('scrolled');
    } else {
      header?.classList.remove('scrolled');
    }
    
    lastScrollY = window.scrollY;
  });
  
  // Get elements
  const loginBtn = document.getElementById('loginBtn');
  const registerBtn = document.getElementById('registerBtn');
  const authButtons = document.getElementById('authButtons');
  const userMenu = document.getElementById('userMenu');
  const userDropdown = document.getElementById('userDropdown');
  const logoutBtn = document.getElementById('logoutBtn');
  const userName = document.getElementById('userName');
  const userRoleSpan = document.getElementById('userRole');
  
  // 🆕 从服务器API检查用户状态
  async function checkUserStatusFromAPI() {
    try {
      const response = await fetch('/api/auth/status', {
        method: 'GET',
        credentials: 'include', // 包含cookies
        headers: {
          'Accept': 'application/json'
        }
      });
      
      // 静默处理401错误，不在控制台显示
      if (response.status === 401) {
        // 清理localStorage
        localStorage.removeItem('currentUser');
        localStorage.removeItem('lastStatusCheck');
        updateHeaderForLoggedOut();
        return false;
      }
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const result = await response.json();
      
      if (result.success && result.user) {
        // 同步到localStorage
        localStorage.setItem('currentUser', JSON.stringify(result.user));
        localStorage.setItem('lastStatusCheck', Date.now().toString());
        updateHeaderForUser(result.user);
        return true;
      } else {
        // 清理localStorage
        localStorage.removeItem('currentUser');
        localStorage.removeItem('lastStatusCheck');
        updateHeaderForLoggedOut();
        return false;
      }
    } catch (error: any) {
      // 不显示API错误，静默回退到localStorage
      checkUserStatusFromLocalStorage();
      return false;
    }
  }
  
  // 🆕 从localStorage检查用户状态（回退方案）
  function checkUserStatusFromLocalStorage() {
    // 检查管理员登录状态（旧系统兼容）
    const isAdminLoggedIn = localStorage.getItem('isLoggedIn') === 'true';
    const adminUsername = localStorage.getItem('username');
    
    // 检查普通用户登录状态（新系统）
    const currentUser = localStorage.getItem('currentUser');
    let userData = null;
    
    if (currentUser) {
      try {
        userData = JSON.parse(currentUser);
      } catch (e) {
        localStorage.removeItem('currentUser');
      }
    }
    
    // 优先显示普通用户状态，其次是管理员状态
    if (userData && userData.id) {
      updateHeaderForUser(userData);
    } else if (isAdminLoggedIn && adminUsername) {
      updateHeaderForAdmin(adminUsername);
    } else {
      updateHeaderForLoggedOut();
    }
  }
  
  // 🆕 智能缓存检查，避免频繁API调用
  function shouldCheckAPI() {
    const lastCheck = localStorage.getItem('lastStatusCheck');
    if (!lastCheck) return true;
    
    const timeSinceLastCheck = Date.now() - parseInt(lastCheck);
    const CACHE_DURATION = 5 * 60 * 1000; // 5分钟缓存
    
    return timeSinceLastCheck > CACHE_DURATION;
  }
  
  // 🆕 统一的用户状态检查入口
  async function checkUserStatus() {
    // 先检查localStorage，如果有用户数据且缓存未过期，直接使用
    const currentUser = localStorage.getItem('currentUser');
    if (currentUser && !shouldCheckAPI()) {
      try {
        const userData = JSON.parse(currentUser);
        updateHeaderForUser(userData);
        console.log('🚀 Using cached user status:', userData.username);
        return;
      } catch (e) {
        localStorage.removeItem('currentUser');
        localStorage.removeItem('lastStatusCheck');
      }
    }
    
    // 缓存过期或无数据时，从API检查
    console.log('🔄 Checking user status from API...');
    await checkUserStatusFromAPI();
  }
  
  // 🆕 更新Header显示普通用户状态
  function updateHeaderForUser(userData: any) {
    const adminManageBtn = document.getElementById('adminManageBtn');
    const adminUsersBtn = document.getElementById('adminUsersBtn');
    const adminNewsletterBtn = document.getElementById('adminNewsletterBtn');
    const headerUserAvatar = document.getElementById('headerUserAvatar');
    const displayName = userData.displayName || userData.username;
    const roleText = userData.role === 'ADMIN' ? 'Administrator' : 'Member';
    
    
    // 隐藏认证按钮，显示用户下拉菜单
    if (authButtons) {
      authButtons.classList.add('hidden');
    }
    if (userDropdown) {
      userDropdown.classList.add('show');
    }
    
    // 更新用户信息显示
    if (userName) {
      userName.textContent = displayName;
    }
    if (userRoleSpan) {
      userRoleSpan.textContent = roleText;
    }
    
    // 更新用户头像
    if (headerUserAvatar && userData.avatar) {
      // 如果有emoji头像，显示emoji
      if (typeof userData.avatar === 'string' && userData.avatar.length <= 10) {
        headerUserAvatar.innerHTML = `<span style="font-size: 24px;">${userData.avatar}</span>`;
      }
    }
    
    // 确保隐藏管理按钮（除非是ADMIN）
    if (adminManageBtn) {
      if (userData.role === 'ADMIN') {
        adminManageBtn.style.display = 'flex';
      } else {
        adminManageBtn.style.display = 'none';
      }
    }
    
    // 控制管理员用户管理按钮显示
    if (adminUsersBtn) {
      if (userData.role === 'ADMIN') {
        adminUsersBtn.style.display = 'flex';
      } else {
        adminUsersBtn.style.display = 'none';
      }
    }
    
    // 控制管理员Newsletter管理按钮显示
    if (adminNewsletterBtn) {
      if (userData.role === 'ADMIN') {
        adminNewsletterBtn.style.display = 'flex';
      } else {
        adminNewsletterBtn.style.display = 'none';
      }
    }
    
    // 设置下拉菜单点击处理
    setupUserDropdownClick();
    
    // 加载邮件订阅状态
    loadNewsletterStatus();
  }
  
  // 🆕 更新Header显示管理员状态（旧系统兼容）
  function updateHeaderForAdmin(username: string) {
    const adminManageBtn = document.getElementById('adminManageBtn');
    
    // 隐藏认证按钮，显示用户下拉菜单
    if (authButtons) {
      authButtons.classList.add('hidden');
    }
    if (userDropdown) {
      userDropdown.classList.add('show');
    }
    
    // 更新用户信息显示
    if (userName) userName.textContent = username;
    if (userRoleSpan) userRoleSpan.textContent = 'Administrator';
    
    // 显示管理按钮
    if (adminManageBtn) {
      adminManageBtn.style.display = 'flex';
    }
    
    // 设置下拉菜单点击处理
    setupUserDropdownClick();
    
    // 加载邮件订阅状态
    loadNewsletterStatus();
  }
  
  // 🆕 更新Header为未登录状态
  function updateHeaderForLoggedOut() {
    const adminManageBtn = document.getElementById('adminManageBtn');
    
    // 显示认证按钮，隐藏用户下拉菜单
    if (authButtons) {
      authButtons.classList.remove('hidden');
    } else {
    }
    
    if (userDropdown) {
      userDropdown.classList.remove('show');
    }
    
    // 隐藏管理按钮
    if (adminManageBtn) {
      adminManageBtn.style.display = 'none';
    }
    
    // 设置按钮点击处理器
    if (loginBtn) {
      loginBtn.onclick = () => {
        // 只打开普通用户登录
        if (window.openUserLoginModal) {
          window.openUserLoginModal();
        } else {
        }
      };
    }
    
    if (registerBtn) {
      registerBtn.onclick = () => {
        if (window.openRegisterModal) {
          window.openRegisterModal();
        } else {
        }
      };
    }
    
    // 确保header newsletter按钮显示未订阅状态并加载状态
    updateHeaderNewsletterButton(false);
    loadNewsletterStatus();
  }
  
  // 🆕 用户下拉菜单点击处理
  function setupUserDropdownClick() {
    const userInfo = document.getElementById('userInfo');
    if (userInfo && userDropdown) {
      userInfo.onclick = (e) => {
        e.stopPropagation();
        userDropdown.classList.toggle('active');
      };
    }
    
    // 点击外部关闭下拉菜单
    document.addEventListener('click', (e) => {
      if (userDropdown && e.target instanceof Node && !userDropdown.contains(e.target)) {
        userDropdown.classList.remove('active');
      }
    });
  }
  
  // 🆕 登出功能
  if (logoutBtn) {
    logoutBtn.addEventListener('click', async () => {
      if (confirm('Do you want to logout?')) {
        
        try {
          // 调用logout API清除服务器端cookie
          const response = await fetch('/api/auth/logout', {
            method: 'POST',
            credentials: 'include' // 重要：包含cookies
          });
          
          if (response.ok) {
          } else {
          }
        } catch (error) {
        }
        
        // 清除所有用户数据
        localStorage.removeItem('isLoggedIn');
        localStorage.removeItem('username');
        localStorage.removeItem('currentUser');
        localStorage.removeItem('lastStatusCheck');
        
        // 关闭下拉菜单
        if (userDropdown) {
          userDropdown.classList.remove('active');
        }
        
        // 更新UI状态
        updateHeaderForLoggedOut();
        
        // 触发登出事件
        window.dispatchEvent(new CustomEvent('userLoggedOut'));
        
        // 不再强制刷新页面，让状态自然更新
        console.log('✅ User logged out successfully');
      }
    });
  }
  
  // Manage articles button functionality
  const adminManageBtn = document.getElementById('adminManageBtn');
  if (adminManageBtn) {
    adminManageBtn.addEventListener('click', () => {
      console.log('🔧 Admin Manage button clicked');
      
      // 尝试多次检查，确保管理脚本已加载
      let retryCount = 0;
      const maxRetries = 10;
      
      const tryOpenAdminModal = () => {
        console.log(`🔍 Attempt ${retryCount + 1}: Checking AdminManagerModal availability...`);
        console.log('window.openAdminManagerModal type:', typeof window.openAdminManagerModal);
        
        if (typeof window.openAdminManagerModal === 'function') {
          console.log('✅ Opening AdminManagerModal');
          try {
            window.openAdminManagerModal();
            console.log('🔧 AdminManagerModal opened successfully');
          } catch (error) {
            console.error('❌ Error calling openAdminManagerModal:', error);
            alert('Failed to open Admin Management. Error: ' + (error instanceof Error ? error.message : String(error)));
          }
        } else {
          retryCount++;
          if (retryCount < maxRetries) {
            console.log(`⏳ AdminManagerModal not ready, retrying in ${retryCount * 100}ms...`);
            setTimeout(tryOpenAdminModal, retryCount * 100);
          } else {
            console.error('❌ openAdminManagerModal function not found after max retries');
            console.log('Available window properties:', Object.keys(window).filter(key => key.includes('Admin')));
            alert('Admin Management panel failed to load. Please refresh the page and try again.');
          }
        }
      };
      
      tryOpenAdminModal();
    });
  }
  
  // Profile settings button functionality
  const profileBtn = document.getElementById('profileBtn');
  if (profileBtn) {
    profileBtn.addEventListener('click', () => {
      if (userDropdown) {
        userDropdown.classList.remove('active');
      }
      if (window.openUserProfileModal) {
        window.openUserProfileModal();
      } else {
      }
    });
  }
  
  // Admin user management button functionality
  const adminUsersBtn = document.getElementById('adminUsersBtn');
  if (adminUsersBtn) {
    adminUsersBtn.addEventListener('click', () => {
      if (userDropdown) {
        userDropdown.classList.remove('active');
      }
      if (window.openAdminUsersModal) {
        window.openAdminUsersModal();
      } else {
      }
    });
  }
  
  // Admin newsletter management button functionality
  const adminNewsletterBtn = document.getElementById('adminNewsletterBtn');
  if (adminNewsletterBtn) {
    adminNewsletterBtn.addEventListener('click', () => {
      console.log('📧 Newsletter Management button clicked');
      if (userDropdown) {
        userDropdown.classList.remove('active');
      }
      
      // 尝试多次检查，确保模态框已加载
      let retryCount = 0;
      const maxRetries = 10;
      
      const tryOpenModal = () => {
        console.log(`🔍 Attempt ${retryCount + 1}: Checking AdminNewsletterModal availability...`);
        console.log('window.openAdminNewsletterModal type:', typeof window.openAdminNewsletterModal);
        
        if (typeof window.openAdminNewsletterModal === 'function') {
          console.log('✅ Opening AdminNewsletterModal');
          try {
            window.openAdminNewsletterModal();
            console.log('📧 AdminNewsletterModal opened successfully');
          } catch (error) {
            console.error('❌ Error calling openAdminNewsletterModal:', error);
            alert('Failed to open Newsletter Management. Error: ' + (error instanceof Error ? error.message : String(error)));
          }
        } else {
          retryCount++;
          if (retryCount < maxRetries) {
            console.log(`⏳ AdminNewsletterModal not ready, retrying in ${retryCount * 100}ms...`);
            setTimeout(tryOpenModal, retryCount * 100);
          } else {
            console.error('❌ openAdminNewsletterModal function not found after max retries');
            console.log('Available window properties:', Object.keys(window).filter(key => key.includes('Admin')));
            alert('Newsletter Management panel failed to load. Please refresh the page and try again.');
          }
        }
      };
      
      tryOpenModal();
    });
  }
  
  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (userMenu && e.target instanceof Node && !userMenu.contains(e.target)) {
      userDropdown?.classList.remove('active');
    }
  });
  
  // Close dropdown when ESC key is pressed
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && userDropdown?.classList.contains('active')) {
      userDropdown?.classList.remove('active');
    }
  });
  
  // 🆕 初始化页面时检查用户状态
  document.addEventListener('DOMContentLoaded', async () => {
    // 从API检查用户状态
    await checkUserStatus();
    
    // 检查newsletter状态（无论是否登录都显示按钮）
    setTimeout(() => {
      loadNewsletterStatus();
    }, 500);
    
    // 检查AdminNewsletterModal是否可用（调试用）
    setTimeout(() => {
      if (typeof window.openAdminNewsletterModal === 'function') {
        console.log('✅ AdminNewsletterModal is available');
      } else {
        console.log('⚠️ AdminNewsletterModal not yet available');
      }
    }, 1000);
  });
  
  // 🆕 页面可见性变化时检查状态（防止后台运行时状态过期）
  document.addEventListener('visibilitychange', async () => {
    if (!document.hidden && shouldCheckAPI()) {
      console.log('🔄 Page became visible, checking user status...');
      await checkUserStatusFromAPI();
    }
  });
  
  // 🆕 监听用户登录事件（从登录模态框触发）
  window.addEventListener('userLoggedIn', (e) => {
    setTimeout(async () => {
      await checkUserStatus();
    }, 100);
  });
  
  // 🆕 导出函数供其他组件使用
  window.checkUserStatus = checkUserStatus;
  window.updateHeaderForUser = updateHeaderForUser;
  window.updateHeaderForAdmin = updateHeaderForAdmin;
  window.updateHeaderForLoggedOut = updateHeaderForLoggedOut;
  
  // 🆕 邮件订阅功能 - 使用全局订阅管理器
  let headerUnsubscribeFromManager: (() => void) | null = null;
  
  // 等待订阅管理器加载
  function waitForHeaderSubscriptionManager(callback: () => void) {
    if (window.subscriptionManager) {
      callback();
    } else {
      setTimeout(() => waitForHeaderSubscriptionManager(callback), 100);
    }
  }
  
  // 初始化Header订阅管理器集成
  function initializeHeaderSubscriptionManager() {
    waitForHeaderSubscriptionManager(() => {
      // 订阅状态变化通知
      headerUnsubscribeFromManager = window.subscriptionManager.onStatusChange((data) => {
        updateHeaderNewsletterButton(data.subscribed);
      });
      
      // 立即检查状态
      window.subscriptionManager.checkStatus();
    });
  }
  
  // 加载邮件订阅状态
  async function loadNewsletterStatus() {
    try {
      console.log('📧 Header: Checking newsletter status...');
      const response = await fetch('/api/newsletter/subscribe', {
        method: 'GET',
        credentials: 'include'
      });
      
      if (!response.ok) {
        console.log('📧 Header: Newsletter status check failed, status:', response.status);
        updateHeaderNewsletterButton(false);
        return;
      }
      
      const result = await response.json();
      console.log('📧 Header: Newsletter status result:', result);
      updateHeaderNewsletterButton(result.subscribed);
    } catch (error) {
      console.log('📧 Header: Newsletter status check failed:', error);
      updateHeaderNewsletterButton(false);
    }
  }
  
  // Update header newsletter button status
  function updateHeaderNewsletterButton(isSubscribed: boolean) {
    const headerNewsletterBtn = document.getElementById('headerNewsletterBtn');
    const headerNewsletterText = headerNewsletterBtn?.querySelector('.newsletter-btn-text');
    
    if (headerNewsletterBtn && headerNewsletterText) {
      if (isSubscribed) {
        headerNewsletterBtn.classList.add('subscribed');
        headerNewsletterText.textContent = '✓ Subscribed';
        headerNewsletterBtn.title = 'You are subscribed to our newsletter';
      } else {
        headerNewsletterBtn.classList.remove('subscribed');
        headerNewsletterText.textContent = 'Newsletter';
        headerNewsletterBtn.title = 'Subscribe to our newsletter';
      }
    }
  }
  
  // Header newsletter button click event
  const headerNewsletterBtn = document.getElementById('headerNewsletterBtn');
  if (headerNewsletterBtn) {
    headerNewsletterBtn.addEventListener('click', async () => {
      const isSubscribed = headerNewsletterBtn.classList.contains('subscribed');
      
      try {
        if (isSubscribed) {
          // Unsubscribe
          const confirmed = confirm('Are you sure you want to unsubscribe from our newsletter?');
          if (!confirmed) return;
          
          console.log('📧 Header: Attempting to unsubscribe...');
          const response = await fetch('/api/newsletter/unsubscribe', {
            method: 'POST',
            credentials: 'include'
          });
          
          const result = await response.json();
          console.log('📧 Header: Unsubscribe result:', result);
          
          if (result.success) {
            alert('✅ ' + result.message);
            loadNewsletterStatus();
            // 通知其他组件状态已更改
            window.dispatchEvent(new CustomEvent('newsletterStatusChanged', { 
              detail: { subscribed: false } 
            }));
          } else {
            alert('ℹ️ ' + (result.message || 'Failed to unsubscribe. Please try again.'));
          }
        } else {
          // Subscribe
          console.log('📧 Header: Attempting to subscribe...');
          const response = await fetch('/api/newsletter/subscribe', {
            method: 'POST',
            credentials: 'include',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ source: 'header' })
          });
          
          const result = await response.json();
          console.log('📧 Header: Subscribe result:', result);
          
          if (result.success) {
            alert('🎉 ' + result.message);
            loadNewsletterStatus();
            // 通知其他组件状态已更改
            window.dispatchEvent(new CustomEvent('newsletterStatusChanged', { 
              detail: { subscribed: true } 
            }));
          } else {
            if (result.error === 'LOGIN_REQUIRED') {
              if (confirm('📧 ' + result.message + '\n\nWould you like to login or register now?')) {
                if (window.openUserLoginModal) {
                  window.openUserLoginModal();
                }
              }
            } else {
              alert('ℹ️ ' + result.message);
            }
          }
        }
      } catch (error) {
        console.error('Header newsletter operation failed:', error);
        alert('❌ Failed to update subscription. Please try again later.');
      }
    });
  }
  
  // 🆕 导出调试函数
</script>