---
import Layout from './Layout.astro';
import ArticleCard from '../components/ui/ArticleCard.astro';
import { getCategoryById } from '../data/categories';

const { category, articles } = Astro.props;
const categoryInfo = getCategoryById(category) || { id: category, name: String(category || 'News'), description: '' };

const title = `${categoryInfo.name} News | GlobalNews`;
const description = categoryInfo.description;
---

<Layout title={title} description={description}>
  <div class="container">
    <header class="category-header">
      <h1 class="category-title">{categoryInfo.name}</h1>
      <p class="category-description">{categoryInfo.description}</p>
    </header>
    
    <div class="articles-list" id="categoryArticlesList">
      {/** @type {any[]} */ (articles as any[]).map((article: any, index: number) => (
        <div class="large-article-card">
          <div class="article-image-container">
            <img 
              src={article.image} 
              alt={article.title}
              class="article-image"
              loading="lazy"
              width="800"
              height="450"
              onerror="this.onerror=null; this.src='/images/placeholder.svg'"
            />
          </div>
          
          <div class="article-content">
            <div class="article-meta">
              <a href={`/category/${article.category}`} class={`category-tag ${article.category}`}>
                {article.category === 'TodayNews' ? 'Today News' : 'Past News'}
              </a>
              <span class="publish-date">{new Date(article.publishDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</span>
            </div>
            
            <h2 class="article-title">
              <a href={`/article/${article.slug}`}>{article.title}</a>
            </h2>
            
            <p class="article-excerpt">{article.excerpt}</p>
            
            <div class="article-footer">
              <span class="author">By {article.author}</span>
              <a href={`/article/${article.slug}`} class="read-more-btn">
                Read more
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></svg>
              </a>
            </div>
          </div>
        </div>
      ))}
    </div>
</Layout>

<!-- Client-side script disabled to prevent content jumping -->
<!-- Script moved to external file if needed in future -->

<style>
  .category-header {
    margin: var(--space-8) 0;
    padding-bottom: var(--space-4);
    border-bottom: 1px solid var(--color-border);
  }
  
  .category-title {
    font-size: 2.5rem;
    margin-bottom: var(--space-2);
    position: relative;
    display: inline-block;
  }
  
  .category-title::after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 0;
    width: 60px;
    height: 4px;
    background-color: var(--color-primary);
  }
  
  .category-description {
    color: var(--color-text-light);
    font-size: 1.125rem;
    max-width: 800px;
    margin-top: var(--space-4);
  }
  
  .articles-list {
    display: flex;
    flex-direction: column;
    gap: var(--space-8);
    margin-top: var(--space-6);
  }

  :global(.large-article-card) {
    background: var(--color-background);
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: var(--shadow-sm);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid var(--color-border);
  }

  :global(.large-article-card:hover) {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }

  :global(.article-image-container) {
    width: 100%;
    aspect-ratio: 16 / 9;
    overflow: hidden;
    position: relative;
  }

  :global(.article-image) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    display: block;
  }

  :global(.large-article-card:hover .article-image) {
    transform: scale(1.05);
  }

  :global(.article-content) {
    padding: var(--space-6);
  }

  :global(.article-meta) {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-4);
    font-size: 0.875rem;
  }

  :global(.publish-date) {
    color: var(--color-text-light);
  }

  :global(.article-title) {
    font-size: 1.75rem;
    font-weight: 700;
    line-height: 1.3;
    margin-bottom: var(--space-4);
  }

  :global(.article-title a) {
    color: var(--color-text);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  :global(.article-title a:hover) {
    color: var(--color-primary);
  }

  :global(.article-excerpt) {
    font-size: 1.125rem;
    line-height: 1.6;
    color: var(--color-text-light);
    margin-bottom: var(--space-6);
  }

  :global(.article-footer) {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: var(--space-4);
    border-top: 1px solid var(--color-border);
  }

  :global(.author) {
    font-weight: 500;
    color: var(--color-text-light);
  }

  :global(.read-more-btn) {
    display: flex;
    align-items: center;
    gap: var(--space-1);
    color: var(--color-primary);
    font-weight: 500;
    text-decoration: none;
    transition: gap var(--transition);
    font-size: 0.875rem;
  }

  :global(.read-more-btn:hover) {
    gap: var(--space-2);
  }

  :global(.no-articles) {
    text-align: center;
    padding: var(--space-8);
    color: var(--color-text-light);
    font-size: 1.125rem;
  }
  
  @media (max-width: 768px) {
    .category-title {
      font-size: 2rem;
    }
    
    :global(.article-title) {
      font-size: 1.5rem;
    }
    
    :global(.article-excerpt) {
      font-size: 1rem;
    }
    
    :global(.article-footer) {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-3);
    }
    
    :global(.read-more-btn) {
      align-self: flex-start;
    }
  }
</style>

<script>
  // Smart client-side update: only update if localStorage has more articles than SSR
  document.addEventListener('DOMContentLoaded', async function() {
    const categoryArticlesList = document.getElementById('categoryArticlesList');
    if (!categoryArticlesList) return;

    // Get current category from URL
    const pathParts = window.location.pathname.split('/');
    const currentCategory = pathParts[pathParts.length - 1];
    
    // Count current articles on page
    const currentArticleCount = categoryArticlesList.querySelectorAll('.large-article-card').length;
    
    // Smart caching: Check cache first, then API for latest articles
    try {
      // Cache configuration
      const cacheKey = 'category_articles_cache';
      const cacheTimeKey = 'category_articles_cache_time';
      const CACHE_DURATION = 30000; // 30 seconds cache
      
      const cachedData = localStorage.getItem(cacheKey);
      const cacheTime = localStorage.getItem(cacheTimeKey);
      const now = Date.now();
      
      let allArticles = null;
      
      // Check if we have valid cached data
      if (cachedData && cacheTime && (now - parseInt(cacheTime)) < CACHE_DURATION) {
        console.log('🚀 Using cached articles data - instant load!');
        allArticles = JSON.parse(cachedData);
      } else {
        console.log('📡 Fetching fresh articles data from API...');
        
        // Create abort controller for request timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
          controller.abort();
          console.warn('⏰ API request timed out after 8 seconds');
        }, 8000); // 8 second timeout
        
        try {
          const response = await fetch('/api/articles', {
            signal: controller.signal
          });
          clearTimeout(timeoutId);
          
          if (response.ok) {
            allArticles = await response.json();
            // Cache the fresh data
            localStorage.setItem(cacheKey, JSON.stringify(allArticles));
            localStorage.setItem(cacheTimeKey, now.toString());
            console.log('✅ Fresh data fetched and cached');
          } else {
            throw new Error(`API responded with status: ${response.status}`);
          }
        } catch (fetchError) {
          clearTimeout(timeoutId);
          throw fetchError;
        }
      }
      
      if (allArticles) {
        const categoryArticles = allArticles
          .filter((article: any) => article.category === currentCategory)
          .sort((a: any, b: any) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime());
        
        // Only update if we have more articles than what's currently displayed
        if (categoryArticles.length > currentArticleCount) {
          console.log(`📰 Found ${categoryArticles.length - currentArticleCount} new articles, updating page...`);
          updateCategoryArticles(categoryArticles);
        } else {
          console.log(`✓ Articles count (${categoryArticles.length}) matches current display (${currentArticleCount})`);
        }
      }
    } catch (error) {
      console.error('❌ Error fetching articles from API:', error);
      // Enhanced fallback strategy
      try {
        // Try legacy localStorage first
        const storedArticles = localStorage.getItem('imacx_articles');
        if (storedArticles) {
          console.log('🔄 Using fallback: legacy localStorage data');
          const parsedArticles = JSON.parse(storedArticles);
          const categoryArticles = parsedArticles
            .filter((article: any) => article.category === currentCategory)
            .sort((a: any, b: any) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime());
          
          if (categoryArticles.length > currentArticleCount) {
            console.log(`📋 Fallback: Found ${categoryArticles.length - currentArticleCount} new articles from localStorage`);
            updateCategoryArticles(categoryArticles);
          }
        } else {
          console.warn('⚠️ No fallback data available, keeping current content');
        }
      } catch (fallbackError) {
        console.error('💥 All fallback strategies failed:', fallbackError);
      }
    }
  });

  function updateCategoryArticles(articles: any[]) {
    const categoryArticlesList = document.getElementById('categoryArticlesList');
    if (!categoryArticlesList) return;

    // Generate new HTML for all articles
    const articlesHTML = articles.map((article: any) => `
      <div class="large-article-card">
        <div class="article-image-container">
          <img data-src="${article.image}" src="/images/placeholder.svg" alt="${article.title}" class="article-image lazy" loading="lazy" width="800" height="450" onerror="this.onerror=null; this.src='/images/placeholder.svg'; this.classList.add('error');">
        </div>
        
        <div class="article-content">
          <div class="article-meta">
            <a href="/category/${article.category}" class="category-tag ${article.category}">
              ${article.category === 'TodayNews' ? 'Today News' : 'Past News'}
            </a>
            <span class="publish-date">${formatDate(article.publishDate)}</span>
          </div>
          
          <h2 class="article-title">
            <a href="/article/${article.slug}">${article.title}</a>
          </h2>
          
          <p class="article-excerpt">${article.excerpt}</p>
          
          <div class="article-footer">
            <span class="author">By ${article.author}</span>
            <a href="/article/${article.slug}" class="read-more-btn">
              Read more
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="5" y1="12" x2="19" y2="12"></line>
                <polyline points="12 5 19 12 12 19"></polyline>
              </svg>
            </a>
          </div>
        </div>
      </div>
    `).join('');

    // Update content smoothly
    categoryArticlesList.innerHTML = articlesHTML;
  }

  function formatDate(dateString: string) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric' 
    });
  }

  // Debounced update mechanism to prevent frequent API calls
  let updateTimeout: NodeJS.Timeout;
  function debouncedUpdate() {
    clearTimeout(updateTimeout);
    updateTimeout = setTimeout(() => {
      // Clear cache to force fresh data
      localStorage.removeItem('category_articles_cache');
      localStorage.removeItem('category_articles_cache_time');
      console.log('🔄 Cache cleared, reloading page...');
      location.reload();
    }, 1000); // 1 second debounce
  }

  // Page visibility API - only update when page is visible
  document.addEventListener('visibilitychange', function() {
    if (document.visibilityState === 'visible') {
      console.log('👁️ Page became visible, checking for updates...');
      debouncedUpdate();
    }
  });

  // Listen for article updates from Admin Manager
  window.addEventListener('articlePublished', () => {
    console.log('📢 Article published event received');
    debouncedUpdate();
  });

  window.addEventListener('articleUpdated', () => {
    console.log('📢 Article updated event received');
    debouncedUpdate();
  });

  // Listen for logout events to clear cache
  window.addEventListener('userLoggedOut', () => {
    console.log('🚪 User logged out, clearing cache...');
    localStorage.removeItem('category_articles_cache');
    localStorage.removeItem('category_articles_cache_time');
  });
</script>