---
import Layout from './Layout.astro';
import ArticleCard from '../components/ui/ArticleCard.astro';
import VideoArticleCard from '../components/ui/VideoArticleCard.astro';
import { getCategoryById } from '../data/categories';

const { category, articles } = Astro.props;
const categoryInfo = getCategoryById(category) || { id: category, name: String(category || 'News'), description: '' };

const title = `${categoryInfo.name} News | GlobalNews`;
const description = categoryInfo.description;

// 🎬 YouTube/Vimeo URL检测和转换函数
function isEmbeddableVideo(url: string): boolean {
  if (!url) return false;
  try {
    const hostname = new URL(url.includes('http') ? url : 'https://' + url).hostname.toLowerCase();
    return hostname.includes('youtube.com') || hostname.includes('youtu.be') || hostname.includes('vimeo.com');
  } catch {
    return false;
  }
}

function convertToEmbedUrl(url: string): string {
  try {
    let videoUrl = url.trim();
    if (!videoUrl.match(/^https?:\/\//)) {
      videoUrl = 'https://' + videoUrl;
    }
    
    const parsedUrl = new URL(videoUrl);
    const hostname = parsedUrl.hostname.toLowerCase();
    
    // YouTube URLs
    if (hostname.includes('youtube.com') || hostname.includes('youtu.be')) {
      let videoId;
      
      if (hostname.includes('youtu.be')) {
        videoId = parsedUrl.pathname.slice(1);
      } else if (parsedUrl.searchParams.has('v')) {
        videoId = parsedUrl.searchParams.get('v');
      } else {
        const match = parsedUrl.pathname.match(/\/embed\/([^/?]+)/);
        if (match) videoId = match[1];
      }
      
      if (videoId) {
        return `https://www.youtube.com/embed/${videoId}`;
      }
    }
    
    // Vimeo URLs
    if (hostname.includes('vimeo.com')) {
      const match = parsedUrl.pathname.match(/\/(\d+)/);
      if (match) {
        return `https://player.vimeo.com/video/${match[1]}`;
      }
    }
    
    return url; // Return original if conversion fails
  } catch (error) {
    console.warn('Failed to convert video URL:', error);
    return url;
  }
}

// 🕒 Format video duration
function formatDuration(seconds: number): string {
  if (!seconds || seconds <= 0) return '0:00';
  const minutes = Math.floor(seconds / 60);
  const secs = Math.floor(seconds % 60);
  return `${minutes}:${secs.toString().padStart(2, '0')}`;
}

// 🎬 Extract YouTube video ID from URL
function getYouTubeVideoId(url: string): string | null {
  try {
    let videoUrl = url.trim();
    if (!videoUrl.match(/^https?:\/\//)) {
      videoUrl = 'https://' + videoUrl;
    }
    
    const parsedUrl = new URL(videoUrl);
    const hostname = parsedUrl.hostname.toLowerCase();
    
    if (hostname.includes('youtube.com') || hostname.includes('youtu.be')) {
      let videoId;
      
      if (hostname.includes('youtu.be')) {
        videoId = parsedUrl.pathname.slice(1);
      } else if (parsedUrl.searchParams.has('v')) {
        videoId = parsedUrl.searchParams.get('v');
      } else {
        const match = parsedUrl.pathname.match(/\/embed\/([^/?]+)/);
        if (match) videoId = match[1];
      }
      
      return videoId;
    }
    
    return null;
  } catch (error) {
    console.warn('Failed to extract YouTube video ID:', error);
    return null;
  }
}

// 🎬 Get YouTube thumbnail URL
function getYouTubeThumbnail(url: string, quality: string = 'maxresdefault'): string | null {
  const videoId = getYouTubeVideoId(url);
  if (!videoId) return null;
  
  // YouTube缩略图质量选项:
  // maxresdefault: 1280x720 (最高质量)
  // hqdefault: 480x360 (高质量)
  // mqdefault: 320x180 (中等质量)
  // default: 120x90 (默认质量)
  return `https://img.youtube.com/vi/${videoId}/${quality}.jpg`;
}
---

<Layout title={title} description={description}>
  <div class="container">
    <header class="category-header">
      <h1 class="category-title">{categoryInfo.name}</h1>
      <p class="category-description">{categoryInfo.description}</p>
    </header>
    
    <div class="articles-list" id="categoryArticlesList">
      {/** @type {any[]} */ (articles as any[]).map((article: any, index: number) => (
        <div class="large-article-card">
          <div class="article-media-container">
            {article.mediaType === 'VIDEO' && article.videoUrl ? (
              <div class="article-video-wrapper">
                {isEmbeddableVideo(article.videoUrl) ? (
                  // 🎬 YouTube/Vimeo iframe嵌入
                  <div class="video-iframe-container">
                    <iframe 
                      src={convertToEmbedUrl(article.videoUrl)}
                      class="article-video-iframe"
                      width="800"
                      height="450"
                      frameborder="0"
                      allowfullscreen
                      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                      title={article.title}
                    ></iframe>
                    <div class="video-type-badge enhanced">
                      <svg width="14" height="14" viewBox="0 0 24 24" fill="white" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M23 7l-7 5 7 5z"/>
                        <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
                      </svg>
                      <span>YOUTUBE</span>
                    </div>
                    {article.videoDuration && (
                      <div class="video-duration-badge-top-right">
                        {formatDuration(article.videoDuration)}
                      </div>
                    )}
                  </div>
                ) : (
                  // 🎥 直接视频文件播放
                  <div class="direct-video-container">
                    <video 
                      controls 
                      poster={article.videoPoster || article.image || '/images/placeholder.svg'}
                      preload="metadata"
                      playsinline
                      class="article-video"
                      width="800"
                      height="450"
                    >
                      <source src={article.videoUrl} type="video/mp4">
                      <source src={article.videoUrl} type="video/webm">
                      <source src={article.videoUrl} type="video/ogg">
                      Your browser does not support the video tag.
                    </video>
                    <div class="video-type-badge dynamic-video-badge">
                      <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M23 7l-7 5 7 5z"/>
                        <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
                      </svg>
                      VIDEO
                    </div>
                    {article.videoDuration && (
                      <div class="video-duration-badge">
                        {formatDuration(article.videoDuration)}
                      </div>
                    )}
                  </div>
                )}
              </div>
            ) : (
              <img 
                src={article.mediaType === 'VIDEO' && isEmbeddableVideo(article.videoUrl) 
                     ? (getYouTubeThumbnail(article.videoUrl) || article.videoPoster || article.image || '/images/placeholder.svg')
                     : (article.mediaType === 'VIDEO' 
                        ? (article.videoPoster || article.image || '/images/placeholder.svg')
                        : article.image)} 
                alt={article.title}
                class="article-image"
                data-article-id={article.id}
                data-video-url={article.mediaType === 'VIDEO' && article.videoUrl ? article.videoUrl : ''}
                data-needs-thumbnail={article.mediaType === 'VIDEO' && !isEmbeddableVideo(article.videoUrl) && !article.videoPoster && !article.image ? 'true' : 'false'}
                loading="lazy"
                width="800"
                height="450"
              />
            )}
          </div>
          
          <div class="article-content">
            <div class="article-meta">
              <a href={`/category/${article.category}`} class={`category-tag ${article.category}`}>
                {article.category === 'TodayNews' ? 'Today News' : 'Past News'}
              </a>
              <span class="publish-date">{new Date(article.publishDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</span>
            </div>
            
            <h2 class="article-title">
              <a href={`/article/${article.slug}`}>{article.title}</a>
            </h2>
            
            <p class="article-excerpt">{article.excerpt}</p>
            
            <div class="article-footer">
              <span class="author">By {article.author}</span>
              <a href={`/article/${article.slug}`} class="read-more-btn">
                {article.mediaType === 'VIDEO' ? 'Watch Video' : 'Read more'}
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="5" y1="12" x2="19" y2="12"></line><path d="M12 5l7 7-7 7"></path></svg>
              </a>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</Layout>

<!-- Client-side script disabled to prevent content jumping -->
<!-- Script moved to external file if needed in future -->

<style>
  /* 配合 Layout.astro 的 Sticky Footer 布局 */
  .container {
    display: flex;
    flex-direction: column;
    flex: 1; /* 让容器填充 main 的全部空间，配合 Footer margin-top: auto */
    /* 移除固定min-height，让JavaScript动态处理布局 */
  }

  .category-header {
    margin: var(--space-8) 0;
    padding-bottom: var(--space-4);
    border-bottom: 1px solid var(--color-border);
    flex-shrink: 0; /* 防止头部区域被压缩 */
  }
  
  .category-title {
    font-size: 2.5rem;
    margin-bottom: var(--space-2);
    position: relative;
    display: inline-block;
  }
  
  .category-title::after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 0;
    width: 60px;
    height: 4px;
    background-color: var(--color-primary);
  }
  
  .category-description {
    color: var(--color-text-light);
    font-size: 1.125rem;
    max-width: 800px;
    margin-top: var(--space-4);
  }
  
  .articles-list {
    display: flex;
    flex-direction: column;
    gap: var(--space-8);
    margin-top: var(--space-6);
    width: 100%;
    flex: 1; /* 关键：让文章列表区域填充剩余空间 */
    /* 移除固定min-height，让JavaScript动态处理sticky footer */
  }

  /* 简化：只设置当前页面的特定样式 */
  .articles-list {
    flex: 1; /* 关键：让文章列表填充剩余空间 */
  }

  :global(#categoryArticlesList .large-article-card) {
    background: var(--color-background);
    border-radius: var(--radius-lg);
    overflow: visible;
    box-shadow: var(--shadow-sm);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid var(--color-border);
  }

  :global(#categoryArticlesList .large-article-card:hover) {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }

  :global(#categoryArticlesList .article-media-container) {
    width: 100%;
    aspect-ratio: 16 / 9;
    overflow: hidden;
    position: relative;
    border-radius: var(--radius-lg) var(--radius-lg) 0 0;
  }

  :global(#categoryArticlesList .article-image) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  :global(#categoryArticlesList .article-video-wrapper) {
    position: relative;
    width: 100%;
    height: 100%;
  }

  :global(#categoryArticlesList .article-video) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    background: #000;
  }

  /* 🎬 YouTube iframe 样式 */
  :global(#categoryArticlesList .video-iframe-container) {
    position: relative;
    width: 100%;
    height: 100%;
    background: #000;
  }

  :global(#categoryArticlesList .article-video-iframe) {
    width: 100%;
    height: 100%;
    border: none;
    background: #000;
  }

  /* 🎥 直接视频容器样式 */
  :global(#categoryArticlesList .direct-video-container) {
    position: relative;
    width: 100%;
    height: 100%;
  }

  :global(#categoryArticlesList .video-type-badge) {
    position: absolute;
    top: 12px;
    left: 12px;
    background: rgba(139, 92, 246, 0.9);
    color: white;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 600;
    z-index: 2;
    display: flex;
    align-items: center;
    gap: 6px;
  }

  :global(#categoryArticlesList .video-type-badge svg) {
    color: white;
    flex-shrink: 0;
  }

  /* 🎯 增强的YouTube标识样式 */
  :global(#categoryArticlesList .video-type-badge.enhanced) {
    background: rgba(0, 0, 0, 0.8);
    border: 2px solid white;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    animation: youtube-badge-glow 2s infinite;
  }

  :global(#categoryArticlesList .video-type-badge.enhanced svg) {
    color: white !important;
    fill: white !important;
    stroke: white !important;
  }

  :global(#categoryArticlesList .video-type-badge.enhanced span) {
    color: white !important;
    font-weight: 700;
  }

  @keyframes youtube-badge-glow {
    0%, 100% { 
      border-color: white;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    }
    50% { 
      border-color: white;
      box-shadow: 0 4px 16px rgba(255, 255, 255, 0.3), 0 2px 8px rgba(0, 0, 0, 0.3);
    }
  }

  :global(#categoryArticlesList .video-duration-badge) {
    position: absolute;
    bottom: 12px;
    right: 12px;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 500;
    z-index: 2;
    display: block;
  }

  /* 🕒 右上角YouTube时长显示 - 与左上角YouTube标识形成视觉平衡 */
  :global(#categoryArticlesList .video-duration-badge-top-right) {
    position: absolute;
    top: 12px;
    right: 12px;
    background: rgba(0, 0, 0, 0.8);
    border: 2px solid white;
    color: white;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 700;
    z-index: 3;
    display: flex;
    align-items: center;
    gap: 4px;
    backdrop-filter: blur(10px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    letter-spacing: 0.5px;
    text-transform: uppercase;
  }


  :global(#categoryArticlesList .large-article-card:hover .article-image) {
    transform: scale(1.05);
  }

  :global(#categoryArticlesList .article-content) {
    padding: var(--space-6);
  }

  :global(#categoryArticlesList .article-meta) {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-4);
    font-size: 0.875rem;
  }

  :global(#categoryArticlesList .publish-date) {
    color: var(--color-text-light);
  }

  :global(#categoryArticlesList .article-title) {
    font-size: 1.75rem;
    font-weight: 700;
    line-height: 1.3;
    margin-bottom: var(--space-4);
  }

  :global(#categoryArticlesList .article-title a) {
    color: var(--color-text);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  :global(#categoryArticlesList .article-title a:hover) {
    color: var(--color-primary);
  }

  :global(#categoryArticlesList .article-excerpt) {
    font-size: 1.125rem;
    line-height: 1.6;
    color: var(--color-text-light);
    margin-bottom: var(--space-6);
  }

  :global(#categoryArticlesList .article-footer) {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: var(--space-4);
    border-top: 1px solid var(--color-border);
  }

  :global(#categoryArticlesList .author) {
    font-weight: 500;
    color: var(--color-text-light);
  }

  :global(#categoryArticlesList .read-more-btn) {
    display: flex;
    align-items: center;
    gap: var(--space-1);
    color: var(--color-primary);
    font-weight: 500;
    text-decoration: none;
    transition: gap var(--transition);
    font-size: 0.875rem;
  }

  :global(#categoryArticlesList .read-more-btn:hover) {
    gap: var(--space-2);
  }

  :global(#categoryArticlesList .no-articles) {
    text-align: center;
    padding: var(--space-8);
    color: var(--color-text-light);
    font-size: 1.125rem;
  }
  
  /* 🕒 移动端适配 - 调整右上角时长显示位置和大小 */
  @media (max-width: 768px) {
    .container {
      flex: 1; /* 移动端保持一致的 flex 设置 */
      /* 移除 min-height 设置，让内容自然扩展，避免子滚动条 */
    }
    
    .category-header {
      margin: var(--space-6) 0; /* 移动端减少间距 */
    }
    
    .category-title {
      font-size: 2rem;
    }
    
    .articles-list {
      /* 动态计算最小高度，由JavaScript设置 */
    }
    
    :global(#categoryArticlesList .article-title) {
      font-size: 1.5rem;
    }
    
    :global(#categoryArticlesList .article-excerpt) {
      font-size: 1rem;
    }
    
    :global(#categoryArticlesList .article-footer) {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-3);
    }
    
    :global(#categoryArticlesList .read-more-btn) {
      align-self: flex-start;
    }

  /* 📱 移动端时长显示适配 */
  :global(#categoryArticlesList .video-duration-badge-top-right) {
    top: 8px;
    right: 8px;
    padding: 4px 8px;
    font-size: 0.7rem;
    border-width: 1px;
  }

  /* 🎬 VIDEO标签动态隐藏样式 */
  :global(.video-type-badge.dynamic-video-badge) {
    position: absolute;
    top: 12px;
    left: 12px;
    background: rgba(139, 92, 246, 0.9);
    color: white;
    padding: 6px 10px;
    border-radius: 8px;
    font-size: 0.75rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 4px;
    backdrop-filter: blur(8px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    z-index: 10;
    transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1), transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    pointer-events: none; /* 默认允许点击穿透 */
  }

  /* 视频播放时的状态 */
  :global(.direct-video-container.playing .dynamic-video-badge) {
    opacity: 0;
    transform: scale(0.8) translateY(-8px);
    pointer-events: none;
  }

  /* 视频暂停时恢复显示 */
  :global(.direct-video-container.paused .dynamic-video-badge),
  :global(.direct-video-container:not(.playing) .dynamic-video-badge) {
    opacity: 1;
    transform: scale(1) translateY(0);
    pointer-events: none;
  }

  /* 悬停时稍微淡化但保持可见 */
  :global(.direct-video-container:hover .dynamic-video-badge) {
    opacity: 0.8;
  }

  /* 🎯 手机版专用 - 精致小尺寸VIDEO图标 */
  @media (max-width: 768px) {
    :global(#categoryArticlesList .video-type-badge) {
      padding: 4px 8px !important;
      font-size: 0.65rem !important;
      gap: 4px !important;
      top: 8px !important;
      left: 8px !important;
      border-radius: 6px !important;
    }
    
    :global(#categoryArticlesList .video-type-badge.enhanced) {
      padding: 4px 8px !important;
      font-size: 0.65rem !important;
      top: 8px !important;
      left: 8px !important;
    }
    
    :global(#categoryArticlesList .video-type-badge svg) {
      width: 12px !important;
      height: 12px !important;
    }
    
    :global(.dynamic-video-badge) {
      top: 8px !important;
      bottom: auto;
      right: auto;
      left: 8px !important;
      font-size: 0.65rem !important;
      padding: 4px 8px !important;
      gap: 4px !important;
    }
    
    :global(.dynamic-video-badge svg) {
      width: 12px !important;
      height: 12px !important;
    }
  }

  }
</style>

<script>
  // Smart client-side update: only update if localStorage has more articles than SSR
  document.addEventListener('DOMContentLoaded', async function() {
    const categoryArticlesList = document.getElementById('categoryArticlesList');
    if (!categoryArticlesList) return;

    // Get current category from URL
    const pathParts = window.location.pathname.split('/');
    const currentCategory = pathParts[pathParts.length - 1];
    
    // Count current articles on page
    const currentArticleCount = categoryArticlesList.querySelectorAll('.large-article-card').length;
    
    // 🎬 为初始渲染的直接视频文件生成缩略图
    generateInitialVideoThumbnails();
    
    // 🎬 初始化视频播放状态管理
    initializeVideoPlayerStates();
    
    // Smart caching: Check cache first, then API for latest articles
    try {
      // Cache configuration
      const cacheKey = 'category_articles_cache';
      const cacheTimeKey = 'category_articles_cache_time';
      const CACHE_DURATION = 30000; // 30 seconds cache
      
      const cachedData = localStorage.getItem(cacheKey);
      const cacheTime = localStorage.getItem(cacheTimeKey);
      const now = Date.now();
      
      let allArticles = null;
      
      // Check if we have valid cached data
      if (cachedData && cacheTime && (now - parseInt(cacheTime)) < CACHE_DURATION) {
        // console.log('🚀 Using cached articles data - instant load!');
        allArticles = JSON.parse(cachedData);
      } else {
        // console.log('📡 Fetching fresh articles data from API...');
        
        // Create abort controller for request timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
          controller.abort();
          console.warn('⏰ API request timed out after 8 seconds');
        }, 8000); // 8 second timeout
        
        try {
          const response = await fetch('/api/articles', {
            signal: controller.signal
          });
          clearTimeout(timeoutId);
          
          if (response.ok) {
            const data = await response.json();
            // 🚀 处理新的API响应格式
            allArticles = data.articles || (Array.isArray(data) ? data : []);
            // Cache the fresh data
            localStorage.setItem(cacheKey, JSON.stringify(allArticles));
            localStorage.setItem(cacheTimeKey, now.toString());
            // console.log('✅ Fresh data fetched and cached');
          } else {
            throw new Error(`API responded with status: ${response.status}`);
          }
        } catch (fetchError) {
          clearTimeout(timeoutId);
          throw fetchError;
        }
      }
      
      if (allArticles && Array.isArray(allArticles)) {
        const categoryArticles = allArticles
          .filter((article: any) => article.category === currentCategory)
          .sort((a: any, b: any) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime());
        
        // Only update if we have more articles than what's currently displayed
        if (categoryArticles.length > currentArticleCount) {
          console.log(`📰 Found ${categoryArticles.length - currentArticleCount} new articles, updating page...`);
          updateCategoryArticles(categoryArticles);
        } else {
          console.log(`✓ Articles count (${categoryArticles.length}) matches current display (${currentArticleCount})`);
        }
      }
    } catch (error) {
      console.error('❌ Error fetching articles from API:', error);
      // Enhanced fallback strategy
      try {
        // Try legacy localStorage first
        const storedArticles = localStorage.getItem('imacx_articles');
        if (storedArticles) {
          // console.log('🔄 Using fallback: legacy localStorage data');
          const parsedArticles = JSON.parse(storedArticles);
          // 🚀 确保数据是数组格式
          const articlesArray = Array.isArray(parsedArticles) ? parsedArticles : (parsedArticles.articles || []);
          const categoryArticles = articlesArray
            .filter((article: any) => article.category === currentCategory)
            .sort((a: any, b: any) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime());
          
          if (categoryArticles.length > currentArticleCount) {
            console.log(`📋 Fallback: Found ${categoryArticles.length - currentArticleCount} new articles from localStorage`);
            updateCategoryArticles(categoryArticles);
          }
        } else {
          console.warn('⚠️ No fallback data available, keeping current content');
        }
      } catch (fallbackError) {
        console.error('💥 All fallback strategies failed:', fallbackError);
      }
    }
  });

  // 🎬 客户端YouTube URL检测和转换函数
  function isEmbeddableVideoClient(url: string): boolean {
    if (!url) return false;
    try {
      const hostname = new URL(url.includes('http') ? url : 'https://' + url).hostname.toLowerCase();
      return hostname.includes('youtube.com') || hostname.includes('youtu.be') || hostname.includes('vimeo.com');
    } catch {
      return false;
    }
  }

  function convertToEmbedUrlClient(url: string): string {
    try {
      let videoUrl = url.trim();
      if (!videoUrl.match(/^https?:\/\//)) {
        videoUrl = 'https://' + videoUrl;
      }
      
      const parsedUrl = new URL(videoUrl);
      const hostname = parsedUrl.hostname.toLowerCase();
      
      // YouTube URLs
      if (hostname.includes('youtube.com') || hostname.includes('youtu.be')) {
        let videoId;
        
        if (hostname.includes('youtu.be')) {
          videoId = parsedUrl.pathname.slice(1);
        } else if (parsedUrl.searchParams.has('v')) {
          videoId = parsedUrl.searchParams.get('v');
        } else {
          const match = parsedUrl.pathname.match(/\/embed\/([^/?]+)/);
          if (match) videoId = match[1];
        }
        
        if (videoId) {
          return `https://www.youtube.com/embed/${videoId}`;
        }
      }
      
      // Vimeo URLs
      if (hostname.includes('vimeo.com')) {
        const match = parsedUrl.pathname.match(/\/(\d+)/);
        if (match) {
          return `https://player.vimeo.com/video/${match[1]}`;
        }
      }
      
      return url; // Return original if conversion fails
    } catch (error) {
      console.warn('Failed to convert video URL:', error);
      return url;
    }
  }

  function formatDurationClient(seconds: number): string {
    if (!seconds || seconds <= 0) return '0:00';
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  }

  // 🎬 客户端YouTube视频ID提取函数
  function getYouTubeVideoIdClient(url: string): string | null {
    try {
      let videoUrl = url.trim();
      if (!videoUrl.match(/^https?:\/\//)) {
        videoUrl = 'https://' + videoUrl;
      }
      
      const parsedUrl = new URL(videoUrl);
      const hostname = parsedUrl.hostname.toLowerCase();
      
      if (hostname.includes('youtube.com') || hostname.includes('youtu.be')) {
        let videoId;
        
        if (hostname.includes('youtu.be')) {
          videoId = parsedUrl.pathname.slice(1);
        } else if (parsedUrl.searchParams.has('v')) {
          videoId = parsedUrl.searchParams.get('v');
        } else {
          const match = parsedUrl.pathname.match(/\/embed\/([^/?]+)/);
          if (match) videoId = match[1];
        }
        
        return videoId;
      }
      
      return null;
    } catch (error) {
      console.warn('Failed to extract YouTube video ID:', error);
      return null;
    }
  }

  // 🎬 客户端YouTube缩略图获取函数
  function getYouTubeThumbnailClient(url: string, quality: string = 'maxresdefault'): string | null {
    const videoId = getYouTubeVideoIdClient(url);
    if (!videoId) return null;
    
    return `https://img.youtube.com/vi/${videoId}/${quality}.jpg`;
  }

  // 🎬 客户端视频缩略图生成函数
  async function generateVideoThumbnailClient(videoUrl: string, width: number = 320, height: number = 180): Promise<string | null> {
    return new Promise((resolve) => {
      try {
        window.debugLog && window.debugLog(`🎬 Starting thumbnail generation for: ${videoUrl}`);
        
        // Create video element
        const video = document.createElement('video');
        video.crossOrigin = 'anonymous';
        video.preload = 'metadata';
        video.muted = true;
        video.playsInline = true;
        video.style.display = 'none';
        
        // Add to DOM temporarily (some browsers require this)
        document.body.appendChild(video);
        
        let isResolved = false;
        
        const cleanup = () => {
          if (video.parentNode) {
            video.parentNode.removeChild(video);
          }
        };
        
        const resolveOnce = (result: string | null) => {
          if (!isResolved) {
            isResolved = true;
            cleanup();
            resolve(result);
          }
        };
        
        video.onloadedmetadata = () => {
          console.log(`🎬 Video metadata loaded, duration: ${video.duration}s`);
          // Try multiple time points to avoid black frames
          const timePoints = [1, 0.5, 2, 0.1];
          let currentAttempt = 0;
          
          const tryNextTimePoint = () => {
            if (currentAttempt < timePoints.length) {
              const timePoint = Math.min(timePoints[currentAttempt], video.duration - 0.1);
              window.debugLog && window.debugLog(`🎬 Attempting thumbnail at ${timePoint}s`);
              video.currentTime = timePoint;
              currentAttempt++;
            } else {
              console.warn('❌ All time points failed');
              resolveOnce(null);
            }
          };
          
          tryNextTimePoint();
        };
        
        video.onseeked = () => {
          try {
            window.debugLog && window.debugLog(`🎬 Video seeked to ${video.currentTime}s, generating thumbnail...`);
            
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            if (!ctx) {
              console.warn('❌ Cannot get canvas context');
              resolveOnce(null);
              return;
            }
            
            canvas.width = width;
            canvas.height = height;
            
            // Draw video frame to canvas
            ctx.drawImage(video, 0, 0, width, height);
            
            // Check if the frame is not completely black
            const imageData = ctx.getImageData(0, 0, width, height);
            const pixels = imageData.data;
            let totalBrightness = 0;
            
            for (let i = 0; i < pixels.length; i += 4) {
              totalBrightness += (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3;
            }
            
            const averageBrightness = totalBrightness / (pixels.length / 4);
            console.log(`🎬 Frame brightness: ${averageBrightness}`);
            
            if (averageBrightness < 10) {
              // Frame is too dark, try next time point
              console.warn('⚠️ Frame too dark, trying next time point');
              const timePoints = [1, 0.5, 2, 0.1];
              if (video.currentTime < timePoints[timePoints.length - 1] + 0.1) {
                video.currentTime = Math.min(video.currentTime + 1, video.duration - 0.1);
                return;
              }
            }
            
            // Convert to data URL
            const thumbnailUrl = canvas.toDataURL('image/jpeg', 0.8);
            window.debugLog && window.debugLog(`✅ Thumbnail generated successfully (${thumbnailUrl.length} bytes)`);
            resolveOnce(thumbnailUrl);
            
          } catch (error) {
            console.warn('❌ Failed to generate video thumbnail:', error);
            resolveOnce(null);
          }
        };
        
        video.onerror = (e) => {
          console.warn('❌ Video loading error:', e);
          resolveOnce(null);
        };
        
        video.onabort = () => {
          console.warn('❌ Video loading aborted');
          resolveOnce(null);
        };
        
        // Set video source and load
        video.src = videoUrl;
        video.load();
        
        // Timeout fallback
        setTimeout(() => {
          console.warn('⏰ Thumbnail generation timeout');
          resolveOnce(null);
        }, 10000); // 10 second timeout
        
      } catch (error) {
        console.warn('❌ Video thumbnail generation error:', error);
        resolve(null);
      }
    });
  }

  // 🎬 简化的视频缩略图生成方法（无跨域限制）
  async function generateSimpleVideoThumbnailClient(videoUrl: string): Promise<string | null> {
    return new Promise((resolve) => {
      try {
        console.log(`🎬 Trying simple method for: ${videoUrl}`);
        
        const video = document.createElement('video');
        video.muted = true;
        video.playsInline = true;
        video.style.display = 'none';
        // 不设置crossOrigin，避免跨域问题
        
        let isResolved = false;
        const resolveOnce = (result: string | null) => {
          if (!isResolved) {
            isResolved = true;
            resolve(result);
          }
        };
        
        video.oncanplay = () => {
          try {
            console.log(`🎬 Simple method: video can play, attempting capture`);
            video.currentTime = 1; // 跳转到1秒位置
          } catch (error) {
            console.warn('🎬 Simple method seek failed:', error);
            resolveOnce(null);
          }
        };
        
        video.onseeked = () => {
          try {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            if (!ctx) {
              resolveOnce(null);
              return;
            }
            
            canvas.width = 320;
            canvas.height = 180;
            ctx.drawImage(video, 0, 0, 320, 180);
            
            const dataUrl = canvas.toDataURL('image/jpeg', 0.7);
            console.log(`✅ Simple method succeeded`);
            resolveOnce(dataUrl);
          } catch (error) {
            console.warn('🎬 Simple method canvas failed:', error);
            resolveOnce(null);
          }
        };
        
        video.onerror = () => {
          console.warn('🎬 Simple method: video error');
          resolveOnce(null);
        };
        
        video.src = videoUrl;
        video.load();
        
        setTimeout(() => resolveOnce(null), 5000);
        
      } catch (error) {
        console.warn('🎬 Simple method exception:', error);
        resolve(null);
      }
    });
  }

  // 🎬 使用video元素的poster属性作为缩略图
  function useVideoPosterAsThumbClient(videoUrl: string, imgElement: HTMLElement) {
    try {
      console.log(`🎬 Using video poster method for: ${videoUrl}`);
      
      // 创建一个隐藏的video元素来获取poster
      const video = document.createElement('video');
      video.style.display = 'none';
      video.style.position = 'absolute';
      video.style.top = '-9999px';
      video.width = 320;
      video.height = 180;
      video.muted = true;
      video.preload = 'metadata';
      
      document.body.appendChild(video);
      
      video.onloadedmetadata = () => {
        try {
          // 尝试生成poster
          video.currentTime = 1;
          
          setTimeout(() => {
            try {
              const canvas = document.createElement('canvas');
              const ctx = canvas.getContext('2d');
              if (ctx) {
                canvas.width = 320;
                canvas.height = 180;
                ctx.fillStyle = '#6366f1'; // 使用品牌色作为背景
                ctx.fillRect(0, 0, 320, 180);
                
                // 添加视频图标
                ctx.fillStyle = 'white';
                ctx.font = '48px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('▶', 160, 110);
                
                const posterUrl = canvas.toDataURL('image/jpeg', 0.8);
                imgElement.src = posterUrl;
                // console.log(`✅ Generated fallback poster for: ${videoUrl}`);
              }
            } catch (error) {
              console.warn('🎬 Fallback poster generation failed:', error);
            } finally {
              if (video.parentNode) {
                video.parentNode.removeChild(video);
              }
            }
          }, 1000);
          
        } catch (error) {
          console.warn('🎬 Video poster metadata error:', error);
          if (video.parentNode) {
            video.parentNode.removeChild(video);
          }
        }
      };
      
      video.onerror = () => {
        console.warn('🎬 Video poster loading failed');
        if (video.parentNode) {
          video.parentNode.removeChild(video);
        }
      };
      
      video.src = videoUrl;
      video.load();
      
    } catch (error) {
      console.warn('🎬 Video poster method failed:', error);
    }
  }

  // 🎬 立即生成视频图标缩略图（无延迟）
  function generateInstantVideoIconClient(imgElement: HTMLElement) {
    try {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      if (!ctx) return;
      
      canvas.width = 320;
      canvas.height = 180;
      
      // 创建渐变背景
      const gradient = ctx.createLinearGradient(0, 0, 320, 180);
      gradient.addColorStop(0, '#8b5cf6'); // 紫色
      gradient.addColorStop(1, '#3b82f6'); // 蓝色
      
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, 320, 180);
      
      // 添加视频播放图标
      ctx.fillStyle = 'white';
      ctx.beginPath();
      // 绘制三角形播放按钮
      ctx.moveTo(120, 60);
      ctx.lineTo(120, 120);
      ctx.lineTo(180, 90);
      ctx.closePath();
      ctx.fill();
      
      // 添加文字 - 改为左上角小尺寸，参考YouTube风格
      ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
      ctx.font = 'bold 10px Arial';
      ctx.textAlign = 'left';
      ctx.fillText('VIDEO', 1, 25);
      
      const thumbnailUrl = canvas.toDataURL('image/jpeg', 0.8);
      imgElement.src = thumbnailUrl;
      
      window.debugLog && window.debugLog(`✅ Generated instant video icon thumbnail`);
    } catch (error) {
      console.warn('Failed to generate instant video icon:', error);
    }
  }

  function updateCategoryArticles(articles: any[]) {
    const categoryArticlesList = document.getElementById('categoryArticlesList');
    if (!categoryArticlesList) return;

    // Generate new HTML for all articles with YouTube support
    const articlesHTML = articles.map((article: any, index: number) => {
      const isVideo = article.mediaType === 'VIDEO' && article.videoUrl;
      const isYoutube = isVideo && isEmbeddableVideoClient(article.videoUrl);
      const needsVideoThumbnail = isVideo && !isYoutube && !article.videoPoster && !article.image;
      
      // 🎬 生成媒体内容HTML
      let mediaHTML;
      if (isVideo) {
        if (isYoutube) {
          // YouTube/Vimeo iframe
          mediaHTML = `
            <div class="article-video-wrapper">
              <div class="video-iframe-container">
                <iframe 
                  src="${convertToEmbedUrlClient(article.videoUrl)}"
                  class="article-video-iframe"
                  width="800"
                  height="450"
                  frameborder="0"
                  allowfullscreen
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  title="${article.title}"
                ></iframe>
                <div class="video-type-badge enhanced">
                  <svg width="14" height="14" viewBox="0 0 24 24" fill="white" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M23 7l-7 5 7 5z"/>
                    <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
                  </svg>
                  <span>YOUTUBE</span>
                </div>
                ${article.videoDuration ? `<div class="video-duration-badge-top-right">${formatDurationClient(article.videoDuration)}</div>` : ''}
              </div>
            </div>
          `;
        } else {
          // 直接视频文件
          mediaHTML = `
            <div class="article-video-wrapper">
              <div class="direct-video-container">
                <video 
                  controls 
                  poster="${article.videoPoster || article.image || '/images/placeholder.svg'}"
                  preload="metadata"
                  playsinline
                  class="article-video"
                  width="800"
                  height="450"
                >
                  <source src="${article.videoUrl}" type="video/mp4">
                  <source src="${article.videoUrl}" type="video/webm">
                  <source src="${article.videoUrl}" type="video/ogg">
                  Your browser does not support the video tag.
                </video>
                <div class="video-type-badge">
                  <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M23 7l-7 5 7 5z"/>
                    <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
                  </svg>
                  VIDEO
                </div>
                ${article.videoDuration ? `<div class="video-duration-badge">${formatDurationClient(article.videoDuration)}</div>` : ''}
              </div>
            </div>
          `;
        }
      } else {
        // 图片 - 如果是视频但不是YouTube，也要尝试获取YouTube缩略图
        let imageSrc = article.image;
        if (article.mediaType === 'VIDEO' && isEmbeddableVideoClient(article.videoUrl)) {
          const youtubeThumbnail = getYouTubeThumbnailClient(article.videoUrl);
          imageSrc = youtubeThumbnail || article.image || '/images/placeholder.svg';
        }
        
        mediaHTML = `
            <img 
              src="${imageSrc}" 
              alt="${article.title}"
              class="article-image"
              data-article-id="${article.id}"
              data-video-url="${isVideo ? article.videoUrl || '' : ''}"
              data-needs-thumbnail="${needsVideoThumbnail ? 'true' : 'false'}"
              loading="lazy"
              width="800"
              height="450"
            />
        `;
      }

      return `
        <div class="large-article-card">
          <div class="article-media-container">
            ${mediaHTML}
          </div>
          
          <div class="article-content">
            <div class="article-meta">
              <a href="/category/${article.category}" class="category-tag ${article.category}">
                ${article.category === 'TodayNews' ? 'Today News' : 'Past News'}
              </a>
              <span class="publish-date">${formatDate(article.publishDate)}</span>
            </div>
            
            <h2 class="article-title">
              <a href="/article/${article.slug}">${article.title}</a>
            </h2>
            
            <p class="article-excerpt">${article.excerpt}</p>
            
            <div class="article-footer">
              <span class="author">By ${article.author}</span>
              <a href="/article/${article.slug}" class="read-more-btn">
                ${isVideo ? 'Watch Video' : 'Read more'}
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <line x1="5" y1="12" x2="19" y2="12"></line>
                  <path d="M12 5l7 7-7 7"></path>
                </svg>
              </a>
            </div>
          </div>
        </div>
      `;
    }).join('');

    // Update content smoothly
    categoryArticlesList.innerHTML = articlesHTML;
    
    // 🎬 异步生成直接视频文件的缩略图
    articles.forEach((article: any, index: number) => {
      const isVideo = article.mediaType === 'VIDEO' && article.videoUrl;
      const isYoutube = isVideo && isEmbeddableVideoClient(article.videoUrl);
      const needsVideoThumbnail = isVideo && !isYoutube && !article.videoPoster && !article.image;
      
      if (needsVideoThumbnail) {
        setTimeout(async () => {
          try {
            window.debugLog && window.debugLog(`🎬 Generating thumbnail for category video: ${article.title}`);
            const generatedThumbnail = await generateVideoThumbnailClient(article.videoUrl);
            if (generatedThumbnail) {
              const imgElement = categoryArticlesList.querySelector(`img[data-article-id="${article.id}"]`);
              if (imgElement) {
                imgElement.src = generatedThumbnail;
                window.debugLog && window.debugLog(`✅ Updated category thumbnail for: ${article.title}`);
              }
            }
          } catch (error) {
            console.warn(`Failed to generate category thumbnail for ${article.title}:`, error);
          }
        }, index * 300); // 延迟生成，避免同时处理太多视频
      }
    });
  }

  // 🎬 初始化视频播放状态管理
  function initializeVideoPlayerStates() {
    const videoElements = document.querySelectorAll('.direct-video-container video');
    console.log(`🎬 Found ${videoElements.length} direct video elements to initialize`);
    
    videoElements.forEach((video) => {
      const videoEl = video as HTMLVideoElement;
      const container = videoEl.closest('.direct-video-container') as HTMLElement;
      if (!container) return;
      
      // 添加播放事件监听器
      videoEl.addEventListener('play', () => {
        console.log('🎬 Video started playing, hiding VIDEO badge');
        container.classList.add('playing');
        container.classList.remove('paused');
      });
      
      // 添加暂停事件监听器
      videoEl.addEventListener('pause', () => {
        console.log('🎬 Video paused, showing VIDEO badge');
        container.classList.remove('playing');
        container.classList.add('paused');
      });
      
      // 添加结束事件监听器
      videoEl.addEventListener('ended', () => {
        console.log('🎬 Video ended, resetting VIDEO badge');
        container.classList.remove('playing');
        container.classList.remove('paused');
      });
      
      // 添加加载完成事件监听器
      videoEl.addEventListener('loadeddata', () => {
        // console.log('🎬 Video loaded, ensuring VIDEO badge is visible');
        container.classList.remove('playing');
        container.classList.remove('paused');
      });
    });
  }

  // 🎬 生成初始页面加载时的视频缩略图
  function generateInitialVideoThumbnails() {
    const articleImages = document.querySelectorAll('#categoryArticlesList img[data-article-id]');
    window.debugLog && window.debugLog(`🎬 Found ${articleImages.length} article images for thumbnail generation`);
    
    articleImages.forEach((imgElement, index) => {
      const needsThumbnail = imgElement.getAttribute('data-needs-thumbnail') === 'true';
      const videoUrl = imgElement.getAttribute('data-video-url');
      const imgSrc = imgElement.src;
      
      console.log(`🎬 Article ${index}: needsThumbnail=${needsThumbnail}, videoUrl=${videoUrl}, imgSrc contains placeholder=${imgSrc.includes('placeholder')}`);
      
      // Also try to generate thumbnails for images showing placeholder, even if not marked
      const shouldTryGenerate = needsThumbnail || (videoUrl && imgSrc.includes('placeholder.svg'));
      
      if (shouldTryGenerate && videoUrl && !isEmbeddableVideoClient(videoUrl)) {
        window.debugLog && window.debugLog(`🎬 Will attempt thumbnail generation for: ${videoUrl}`);
        
        // 立即生成一个临时的视频图标缩略图
        generateInstantVideoIconClient(imgElement);
        
        setTimeout(async () => {
          try {
            window.debugLog && window.debugLog(`🎬 Starting thumbnail generation for direct video: ${videoUrl}`);
            
            // Try a simpler approach first - use video poster frame
            const simpleThumb = await generateSimpleVideoThumbnailClient(videoUrl);
            if (simpleThumb) {
              imgElement.src = simpleThumb;
              window.debugLog && window.debugLog(`✅ Updated thumbnail using simple method: ${videoUrl}`);
              return;
            }
            
            // Fallback to complex method
            const generatedThumbnail = await generateVideoThumbnailClient(videoUrl);
            if (generatedThumbnail) {
              imgElement.src = generatedThumbnail;
              window.debugLog && window.debugLog(`✅ Updated thumbnail using complex method: ${videoUrl}`);
            } else {
              console.warn(`❌ Both methods failed for video: ${videoUrl}`);
              // Use a video poster as fallback
              useVideoPosterAsThumbClient(videoUrl, imgElement);
            }
          } catch (error) {
            console.warn(`Failed to generate thumbnail for video ${videoUrl}:`, error);
            useVideoPosterAsThumbClient(videoUrl, imgElement);
          }
        }, index * 200 + 500); // 缩短延迟，快速生成
      }
    });
  }

  function formatDate(dateString: string) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric' 
    });
  }

  // 🚀 ENHANCED real-time update mechanism with Cache Sync Manager
  let updateTimeout: NodeJS.Timeout;
  function debouncedUpdate() {
    clearTimeout(updateTimeout);
    updateTimeout = setTimeout(async () => {
      console.log('🔄 CategoryLayout: Processing real-time update...');
      
      // 🧹 Use Cache Sync Manager for comprehensive cache management
      if ((window as any).cacheSyncManager) {
        window.debugLog && window.debugLog('✅ Using Cache Sync Manager for cache clearing...');
        (window as any).cacheSyncManager.clearAllCaches();
        
        // Check cache consistency and trigger database sync if needed
        try {
          const isConsistent = await (window as any).cacheSyncManager.checkCacheConsistency();
          if (!isConsistent) {
            window.debugLog && window.debugLog('⚠️ Cache inconsistency detected, triggering database sync...');
            await (window as any).cacheSyncManager.triggerDatabaseSync();
          }
        } catch (e) {
          console.warn('⚠️ Cache consistency check failed:', e);
        }
      } else {
        // Fallback cache clearing if Cache Sync Manager is not loaded yet
        window.debugLog && window.debugLog('⚠️ Cache Sync Manager not available, using fallback...');
        if ((window as any).clearAllArticleCaches) {
          (window as any).clearAllArticleCaches();
        } else {
          localStorage.removeItem('category_articles_cache');
          localStorage.removeItem('category_articles_cache_time');
          localStorage.removeItem('imacx_articles');
          localStorage.removeItem('imacx_articles_cache');
          if ('caches' in window) {
            caches.delete('api-cache').catch(() => {});
          }
        }
      }
      
      window.debugLog && window.debugLog('🔄 Cache clearing completed, reloading page for real-time update...');
      location.reload();
    }, 200); // ⚡ Further reduced debounce to 200ms for faster response with Cache Sync Manager
  }

  // Page visibility API - only update when page is visible
  document.addEventListener('visibilitychange', function() {
    if (document.visibilityState === 'visible') {
      console.log('👁️ Page became visible, checking for updates...');
      debouncedUpdate();
    }
  });

  // 📡 Listen for ALL article events from Admin Manager for real-time sync
  window.addEventListener('articlePublished', () => {
    console.log('📢 Article published event received - triggering real-time update');
    debouncedUpdate();
  });

  window.addEventListener('articleUpdated', () => {
    console.log('📢 Article updated event received - triggering real-time update');
    debouncedUpdate();
  });

  // 🗑️ NEW: Listen for article deletion events  
  window.addEventListener('articleDeleted', (event: any) => {
    console.log('📢 Article deleted event received - triggering real-time update');
    console.log('🗑️ Deleted article ID:', event.detail?.articleId);
    debouncedUpdate();
  });

  // Listen for logout events to clear cache
  window.addEventListener('userLoggedOut', () => {
    console.log('🚪 User logged out, clearing cache...');
    localStorage.removeItem('category_articles_cache');
    localStorage.removeItem('category_articles_cache_time');
  });
</script>

<!-- 智能自动Footer位置调节 -->
<script is:inline>
document.addEventListener('DOMContentLoaded', function() {
  // console.log('🚀 启动智能Footer自动定位系统...');
  
  // 添加全局防抖机制，避免函数被频繁调用
  let footerPositionTimeout;
  function autoPositionFooter() {
    clearTimeout(footerPositionTimeout);
    footerPositionTimeout = setTimeout(function() {
      // 获取关键元素
      const footer = document.querySelector('.site-footer');
      const articlesList = document.querySelector('.articles-list');
      const articles = document.querySelectorAll('.articles-list .large-article-card');
      
      if (!footer || !articlesList || articles.length === 0) {
        console.warn('❌ 找不到必要元素:', { footer: !!footer, articlesList: !!articlesList, articles: articles.length });
        return;
      }
      
      // console.log('📊 找到', articles.length, '篇文章');
      
      // 添加运行标记，防止重复执行
      if (footer.dataset.positioning === 'true') {
        // console.log('🔄 Footer正在定位中，跳过本次执行');
        return;
      }
      footer.dataset.positioning = 'true';
    
    // 🎯 动态计算移动端articles-list最小高度
    if (window.innerWidth <= 768) {
      // 计算所有文章的总高度
      let totalArticlesHeight = 0;
      articles.forEach(article => {
        totalArticlesHeight += article.offsetHeight;
      });
      
      // 加上文章间的间距 (articles.length - 1) * gap
      const articleGap = 32; // var(--space-8) ≈ 32px
      const totalGapHeight = (articles.length - 1) * articleGap;
      
      // 计算动态最小高度：文章总高度 + 间距 + 额外缓冲
      const dynamicMinHeight = totalArticlesHeight + totalGapHeight + 120; // 移动端恢复缓冲到80px
      
      // 设置动态最小高度
      articlesList.style.minHeight = dynamicMinHeight + 'px';
      
      // console.log('📱 移动端动态设置:');
      // console.log('  文章总高度:', totalArticlesHeight, 'px');
      // console.log('  间距总高度:', totalGapHeight, 'px');
      // console.log('  动态最小高度:', dynamicMinHeight, 'px');
    } else {
      // 桌面端清除最小高度限制
      articlesList.style.minHeight = '';
    }
    
    // 重置Footer的margin-top，让我们重新计算
    footer.style.marginTop = '0px';
    footer.style.position = 'relative';
    footer.style.clear = 'both';
    footer.style.display = 'block';
    
    // 等待样式重置完成，然后计算位置
    setTimeout(function() {
      // 获取最后一篇文章的位置
      const lastArticle = articles[articles.length - 1];
      const lastArticleRect = lastArticle.getBoundingClientRect();
      const currentScrollY = window.scrollY;
      
      // 计算最后一篇文章在文档中的绝对位置
      const lastArticleBottom = lastArticleRect.bottom + currentScrollY;
      
      // 获取文章列表容器的底部位置
      const articlesListRect = articlesList.getBoundingClientRect();
      const articlesListBottom = articlesListRect.bottom + currentScrollY;
      
      // 获取Footer当前的位置
      const footerRect = footer.getBoundingClientRect();
      const footerTop = footerRect.top + currentScrollY;
      
      // console.log('📏 位置分析:');
      // console.log('  最后文章底部:', Math.round(lastArticleBottom), 'px');
      // console.log('  文章列表底部:', Math.round(articlesListBottom), 'px');
      // console.log('  Footer当前顶部:', Math.round(footerTop), 'px');
      
      // 计算理想的Footer位置（移动端和桌面端使用不同距离）
      const isMobile = window.innerWidth <= 768;
      const footerGap = isMobile ? -60 : 60; // 移动端10px，桌面端60px
      // console.log(`📱 设备检测: ${isMobile ? '移动端' : '桌面端'} (宽度: ${window.innerWidth}px, 间距: ${footerGap}px)`);
      const idealFooterTop = Math.max(lastArticleBottom, articlesListBottom) + footerGap;
      
      // 计算需要的margin-top
      const requiredMarginTop = Math.max(0, idealFooterTop - footerTop);
      
      // console.log('🎯 计算结果:');
      // console.log('  理想Footer位置:', Math.round(idealFooterTop), 'px');
      // console.log('  需要的margin-top:', Math.round(requiredMarginTop), 'px');
      
      // 应用计算出的间距
      if (requiredMarginTop > 0) {
        footer.style.marginTop = Math.round(requiredMarginTop) + 'px';
        // console.log(`✅ Footer已自动调整到最后文章下方${footerGap}px`);
      } else {
        footer.style.marginTop = footerGap + 'px'; // 使用相应的最小间距
        console.log(`✅ Footer使用最小间距${footerGap}px`);
      }
      
      // 验证最终位置
      setTimeout(function() {
        const finalFooterRect = footer.getBoundingClientRect();
        const finalFooterTop = finalFooterRect.top + window.scrollY;
        const finalGap = finalFooterTop - Math.max(lastArticleBottom, articlesListBottom);
        
        // console.log('🔍 最终验证:');
        // console.log('  Footer最终位置:', Math.round(finalFooterTop), 'px');
        // console.log('  与最后文章间距:', Math.round(finalGap), 'px');
        
        // 根据移动端/桌面端设置不同的验证标准
        const minGap = window.innerWidth <= 768 ? 5 : 40; // 移动端最小5px，桌面端40px
        const maxGap = window.innerWidth <= 768 ? 20 : 100; // 移动端最大20px，桌面端100px
        
        if (finalGap >= minGap && finalGap <= maxGap) {
          // console.log('🎉 完美！Footer位置自动调整成功');
        } else if (finalGap >= 0) {
          // console.log('✅ Footer位置正常，间距稍有偏差');
        } else {
          // console.log('⚠️ Footer位置可能有重叠，需要调整');
        }
        
        // 清除定位标记
        footer.dataset.positioning = 'false';
      }, 100);
      
    }, 100);
    }, 150); // 主防抖延迟150ms
  }
  
  // 页面加载完成后执行
  autoPositionFooter();
  
  // 监听窗口大小变化，重新调整（优化防抖，避免移动端滚动时的闪动）
  let resizeTimeout;
  let lastWindowWidth = window.innerWidth;
  let lastWindowHeight = window.innerHeight;
  
  window.addEventListener('resize', function() {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(function() {
      const currentWidth = window.innerWidth;
      const currentHeight = window.innerHeight;
      
      // 只有在宽度或高度显著变化时才重新定位（避免移动端滚动时地址栏引起的小幅变化）
      const widthChange = Math.abs(currentWidth - lastWindowWidth);
      const heightChange = Math.abs(currentHeight - lastWindowHeight);
      
      if (widthChange > 50 || heightChange > 100) {
        // console.log('📐 窗口大小显著改变，重新调整Footer位置...');
        // console.log(`  宽度变化: ${widthChange}px, 高度变化: ${heightChange}px`);
        lastWindowWidth = currentWidth;
        lastWindowHeight = currentHeight;
        autoPositionFooter();
      } else {
        console.log('📱 忽略小幅resize（可能是移动端滚动引起）');
      }
    }, 500); // 增加防抖时间到500ms
  });
  
  // 监听图片加载完成，重新调整（因为图片加载可能改变文章高度）
  const images = document.querySelectorAll('.articles-list img');
  let loadedImages = 0;
  const totalImages = images.length;
  
  if (totalImages > 0) {
    images.forEach(function(img) {
      if (img.complete) {
        loadedImages++;
      } else {
        img.addEventListener('load', function() {
          loadedImages++;
          if (loadedImages === totalImages) {
            // console.log('🖼️ 所有图片加载完成，重新调整Footer位置...');
            setTimeout(autoPositionFooter, 200);
          }
        });
        
        img.addEventListener('error', function() {
          loadedImages++;
          if (loadedImages === totalImages) {
            // console.log('🖼️ 图片加载完成（含错误），重新调整Footer位置...');
            setTimeout(autoPositionFooter, 200);
          }
        });
      }
    });
    
    // 如果所有图片都已经加载完成
    if (loadedImages === totalImages) {
      // console.log('🖼️ 图片已预加载，延迟调整Footer位置...');
      setTimeout(autoPositionFooter, 500);
    }
  }
  
  console.log('🎯 智能Footer定位系统已启动');
});
</script>