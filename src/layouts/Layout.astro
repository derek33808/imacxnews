---
import Header from '../components/global/Header.astro';
import Footer from '../components/global/Footer.astro';
// import LoginModal from '../components/global/LoginModal.astro'; // 已替换为UserLoginModal
import AdminArticleManager from '../components/global/AdminArticleManager.astro';
import UserRegisterModal from '../components/global/UserRegisterModal.astro';
import UserLoginModal from '../components/global/UserLoginModal.astro';
import UserProfileModal from '../components/global/UserProfileModal.astro';
import AdminUsersModal from '../components/global/AdminUsersModal.astro';
import '../styles/global.css';

interface Props {
  title?: string;
  description?: string;
}

const { title = 'IMACXNews', description = 'Your trusted source for breaking news from Avenues The World School' } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <!-- Content Security Policy for better security -->
    {import.meta.env.DEV ? (
      <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' 'wasm-unsafe-eval' chrome-extension: moz-extension: safari-extension:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https: blob:; media-src 'self' https: blob:; frame-src 'self' https://www.youtube.com https://www.youtube-nocookie.com https://player.vimeo.com; child-src 'self' https://www.youtube.com https://www.youtube-nocookie.com https://player.vimeo.com; connect-src 'self' https: wss: ws: localhost:*; font-src 'self' data: https://fonts.gstatic.com; object-src 'none'; base-uri 'self';" />
    ) : (
      <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' 'wasm-unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https: blob:; media-src 'self' https: blob:; frame-src 'self' https://www.youtube.com https://www.youtube-nocookie.com https://player.vimeo.com; child-src 'self' https://www.youtube.com https://www.youtube-nocookie.com https://player.vimeo.com; connect-src 'self' https: wss:; font-src 'self' data: https://fonts.gstatic.com; object-src 'none'; base-uri 'self';" />
    )}
    <title>{title}</title>
    <style>
      .app-layout {
        min-height: 100vh; /* 最小高度，避免强制限制内容 */
        display: flex;
        flex-direction: column;
        width: 100%;
        overflow: visible; /* 使用页面自身滚动，避免子滚动容器 */
        flex: 1; /* 确保app-layout填满body */
      }
      .app-layout main {
        display: flex; /* 让 main 成为弹性列容器 */
        flex-direction: column;
        flex: 1; /* 关键：让main占据剩余空间 */
        width: 100%;
        overflow: visible;
      }
    </style>
  </head>
  <body>
    <div class="app-layout">
      <Header />
      <main>
        <slot />
      </main>
      <Footer />
    </div>
    <!-- <LoginModal /> 已替换为UserLoginModal -->
    <AdminArticleManager />
    <UserRegisterModal />
    <UserLoginModal />
    <UserProfileModal />
    <AdminUsersModal />
    
    <!-- 🚀 性能优化: 延迟加载非关键脚本 -->
    <script is:inline>
      // 延迟加载管理脚本，仅在需要时加载
      function loadAdminScripts() {
        if (window.adminScriptsLoaded) return;
        window.adminScriptsLoaded = true;
        
        const scripts = [
          '/scripts/admin-manager.js',
          '/scripts/debug-utils.js',
          '/scripts/cache-cleaner.js'
        ];
        
        scripts.forEach((src, index) => {
          setTimeout(() => {
            const script = document.createElement('script');
            script.src = src;
            script.async = true;
            script.onerror = () => console.warn(`Failed to load: ${src}`);
            document.head.appendChild(script);
          }, index * 100); // 错开加载时间
        });
      }
      
      // 检查是否需要管理功能
      if (localStorage.getItem('user_token') || window.location.pathname.includes('/admin')) {
        loadAdminScripts();
      }
      
      // 延迟加载平滑滚动（非关键）
      setTimeout(() => {
        const smoothScrollScript = document.createElement('script');
        smoothScrollScript.src = '/scripts/smooth-scroll.js';
        smoothScrollScript.async = true;
        document.head.appendChild(smoothScrollScript);
      }, 1000);
    </script>
    
    <!-- Global error handling for better UX -->
    <script is:inline>
      // Global error handling to reduce console noise
      window.addEventListener('error', function(e) {
        // Suppress common development/extension errors
        const message = e.message || '';
        const source = e.filename || '';
        
        // Filter out browser extension errors and common dev issues
        if (
          source.includes('chrome-extension://') ||
          source.includes('moz-extension://') ||
          source.includes('safari-extension://') ||
          message.includes('Non-Error promise rejection') ||
          message.includes('ResizeObserver loop limit exceeded') ||
          message.includes('401') ||
          message.includes('Unauthorized')
        ) {
          e.preventDefault();
          return false;
        }
      });
      
      // Handle unhandled promise rejections
      window.addEventListener('unhandledrejection', function(e) {
        const reason = e.reason || '';
        if (
          reason.toString().includes('chrome-extension') ||
          reason.toString().includes('moz-extension') ||
          reason.toString().includes('safari-extension') ||
          reason.toString().includes('401') ||
          reason.toString().includes('Unauthorized')
        ) {
          e.preventDefault();
          return false;
        }
      });
      
      // Override console.error for 401 errors
      const originalConsoleError = console.error;
      console.error = function(...args) {
        const message = args.join(' ');
        if (message.includes('401') || message.includes('Unauthorized')) {
          // Silently ignore 401 errors
          return;
        }
        originalConsoleError.apply(console, args);
      };
    </script>
    
    <!-- 🚀 优化后的图片处理脚本 -->
    <script is:inline>
      // 轻量级图片优化和错误处理
      (function() {
        function handleImageErrors() {
          const images = document.querySelectorAll('img:not([data-optimized])');
          images.forEach(img => {
            img.dataset.optimized = 'true';
            
            // 简化的错误处理
            if (!img.onerror) {
              img.onerror = () => {
                img.src = '/images/placeholder.svg';
                img.classList.add('error');
              };
            }
          });
        }
        
        // 延迟执行图片优化，避免阻塞关键渲染
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', () => {
            setTimeout(handleImageErrors, 100);
          });
        } else {
          setTimeout(handleImageErrors, 100);
        }
      })();
    </script>
    <!-- 🚀 优化后的懒加载脚本 -->
    <script is:inline>
      // 轻量级懒加载实现
      function initLazyLoading() {
        if ('IntersectionObserver' in window) {
          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target;
                if (img.dataset.src) {
                  img.src = img.dataset.src;
                  img.classList.remove('lazy');
                  observer.unobserve(img);
                }
              }
            });
          }, { rootMargin: '50px' });
          
          // 观察现有图片
          document.querySelectorAll('img[data-src]').forEach(img => {
            observer.observe(img);
          });
          
          // 延迟注册Service Worker
          setTimeout(() => {
            if ('serviceWorker' in navigator) {
              navigator.serviceWorker.register('/service-worker.js').catch(() => {});
            }
          }, 2000);
        } else {
          // 降级处理
          document.querySelectorAll('img[data-src]').forEach(img => {
            img.src = img.dataset.src;
            img.classList.remove('lazy');
          });
        }
      }
      
      // 延迟初始化懒加载
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          setTimeout(initLazyLoading, 200);
        });
      } else {
        setTimeout(initLazyLoading, 200);
      }
    </script>
  </body>
</html>