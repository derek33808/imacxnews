---
import Header from '../components/global/Header.astro';
import Footer from '../components/global/Footer.astro';
// import LoginModal from '../components/global/LoginModal.astro'; // 已替换为UserLoginModal
import AdminArticleManager from '../components/global/AdminArticleManager.astro';
import UserRegisterModal from '../components/global/UserRegisterModal.astro';
import UserLoginModal from '../components/global/UserLoginModal.astro';
import UserProfileModal from '../components/global/UserProfileModal.astro';
import AdminUsersModal from '../components/global/AdminUsersModal.astro';
import '../styles/global.css';

interface Props {
  title?: string;
  description?: string;
}

const { title = 'IMACXNews', description = 'Your trusted source for breaking news from Avenues The World School' } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <!-- Temporarily disable CSP for YouTube testing -->
    <!-- <meta http-equiv="Content-Security-Policy" content="..." /> -->
    <title>{title}</title>
    <style>
      .app-layout {
        min-height: 100vh; /* 最小高度，避免强制限制内容 */
        display: flex;
        flex-direction: column;
        width: 100%;
        overflow: visible; /* 使用页面自身滚动，避免子滚动容器 */
        flex: 1; /* 确保app-layout填满body */
      }
      .app-layout main {
        display: flex; /* 让 main 成为弹性列容器 */
        flex-direction: column;
        flex: 1; /* 关键：让main占据剩余空间 */
        width: 100%;
        overflow: visible;
      }
    </style>
  </head>
  <body>
    <div class="app-layout">
      <Header />
      <main>
        <slot />
      </main>
      <Footer />
    </div>
    <!-- <LoginModal /> 已替换为UserLoginModal -->
    <AdminArticleManager />
    <UserRegisterModal />
    <UserLoginModal />
    <UserProfileModal />
    <AdminUsersModal />
    
    <!-- External scripts for CSP compliance -->
    <script src="/scripts/smooth-scroll.js" is:inline></script>
    
    <!-- 🛡️ Admin Manager Lite Stability Patch - Temporarily disabled -->
    <!-- <script src="/scripts/admin-manager-stability-patch-lite.js" is:inline></script> -->
    
    <!-- 🚀 Cache Sync Manager - Temporarily disabled to prevent cache loops -->
    <!-- <script src="/scripts/cache-sync-manager.js" is:inline></script> -->
    
    <script src="/scripts/admin-manager.js" is:inline></script>
    
    <!-- 🔧 Enhanced Admin Operations - Temporarily disabled to fix infinite loop -->
    <!-- <script src="/scripts/admin-manager-enhanced-operations.js" is:inline></script> -->
    
    <!-- 🚀 Debug utilities -->
    <script src="/scripts/debug-utils.js" is:inline></script>
    
    <!-- 🚀 Cache cleaner - fix API format compatibility issues -->
    <script src="/scripts/cache-cleaner.js" is:inline></script>
    
    <!-- 🚀 Load enhanced lazy loader -->
    <script is:inline>
      
      // Load enhanced lazy loader for better performance
      const lazyScript = document.createElement('script');
      lazyScript.src = '/scripts/lazy-loader.js';
      lazyScript.async = true;
      document.head.appendChild(lazyScript);
    </script>
    
    <!-- Image optimization script -->
    <script is:inline>
      // Image optimization and error handling script
      (function() {
        // Clear invalid image cache and data
        function clearInvalidImageCache() {
          try {
            // 清理localStorage中的缓存数据
            const keys = Object.keys(localStorage);
            keys.forEach(key => {
              if (key.includes('homepage_articles_cache') || key.includes('imacx_articles')) {
                const data = localStorage.getItem(key);
                if (data && (data.includes('placeholder.com') || data.includes('example.com') || data.includes('via.placeholder.com'))) {
                  localStorage.removeItem(key);
                  console.log('🗑️ Clearing invalid cache data:', key);
                }
              }
            });

            // 清理Service Worker缓存
            if ('caches' in window) {
              caches.keys().then(cacheNames => {
                cacheNames.forEach(cacheName => {
                  caches.open(cacheName).then(cache => {
                    cache.keys().then(requests => {
                      requests.forEach(request => {
                        if (request.url.includes('placeholder.com') || 
                            request.url.includes('example.com') ||
                            request.url.includes('via.placeholder.com')) {
                          cache.delete(request);
                          window.debugLog('🗑️ 清理无效图片缓存:', request.url);
                        }
                      });
                    });
                  });
                });
              });
            }
          } catch (e) {
            console.warn('清理缓存时出错:', e);
          }
        }
        
        function optimizeImages() {
          const images = document.querySelectorAll('img[src]:not(.lazy):not([data-src])');
          images.forEach(img => {
            if (img.dataset.optimized) return;
            img.dataset.optimized = 'true';
            
            const src = img.src;
            // 检测并替换无效的外部图片URL
            if (src.includes('example.com') || src.includes('placeholder.com') || src.includes('via.placeholder.com')) {
              img.src = '/images/placeholder.svg';
              window.debugLog('🔄 替换无效图片URL:', src);
              return;
            }
            
            // 只为没有onerror处理的图片添加超时和错误处理
            if (!img.onerror || img.onerror.toString().includes('this.onerror=null')) {
              const timeout = setTimeout(() => {
                if (!img.complete) {
                  img.src = '/images/placeholder.svg';
                  window.debugLog('⏰ 图片加载超时，使用占位图:', src);
                }
              }, 5000); // 减少到5秒超时
              
              const originalOnLoad = img.onload;
              img.onload = (e) => {
                clearTimeout(timeout);
                img.style.opacity = '1';
                if (originalOnLoad) originalOnLoad.call(img, e);
              };

              const originalOnError = img.onerror;
              img.onerror = (e) => {
                clearTimeout(timeout);
                img.src = '/images/placeholder.svg';
                img.classList.add('error');
                console.warn('❌ 图片加载失败，使用占位图:', src);
                if (originalOnError) originalOnError.call(img, e);
              };
            }
          });
        }
        
        // 初始化时清理缓存
        clearInvalidImageCache();
        
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', optimizeImages);
        } else {
          optimizeImages();
        }
        
        // 监听动态内容
        if (window.MutationObserver) {
          const observer = new MutationObserver(optimizeImages);
          observer.observe(document.body, { childList: true, subtree: true });
        }
      })();
    </script>
    <!-- 图片懒加载脚本 - 内联版本（修复Netlify导入问题） -->
    <script is:inline>
      // 图片懒加载工具 - 内联版本，解决Netlify环境下的模块导入问题
      function initLazyImageLoader() {
        window.debugLog('🚀 初始化图片懒加载（内联版本）');
        
        if ('IntersectionObserver' in window) {
          const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target;
                const src = img.dataset.src;
                
                if (src) {
                  window.debugLog('🖼️ 加载懒加载图片:', src);
                  // 直接设置图片src，避免预加载导致的控制台错误
                  img.src = src;
                  img.classList.remove('lazy');
                  img.classList.add('loaded');
                  
                  // 设置错误处理（仅在图片自身的onerror未处理时）
                  if (!img.onerror) {
                    img.onerror = () => {
                      img.src = '/images/placeholder.svg';
                      img.classList.add('error');
                      console.warn('❌ 图片加载失败，使用占位图:', src);
                    };
                  }
                  
                  imageObserver.unobserve(img);
                }
              }
            });
          }, {
            rootMargin: '50px' // 提前50px开始加载
          });

          // 观察所有懒加载图片
          const observeImages = () => {
            const lazyImages = document.querySelectorAll('img[data-src]:not(.observed)');
            window.debugLog('🔍 发现懒加载图片数量:', lazyImages.length);
            lazyImages.forEach(img => {
              img.classList.add('observed');
              imageObserver.observe(img);
              window.debugLog('👀 观察图片:', img.dataset.src);
            });
          };
          
          observeImages();
          
          // 监听DOM变化，观察新添加的图片
          const mutationObserver = new MutationObserver(() => {
            observeImages();
          });
          
          mutationObserver.observe(document.body, {
            childList: true,
            subtree: true
          });
          
        } else {
          // 降级处理
          window.debugLog('🔄 IntersectionObserver不支持，使用降级懒加载处理');
          document.querySelectorAll('img[data-src]').forEach(img => {
            window.debugLog('🖼️ 降级加载图片:', img.dataset.src);
            img.src = img.dataset.src;
            img.classList.remove('lazy');
            img.classList.add('loaded');
          });
        }
      }
      
      // 图片缓存清理
      function clearImageCache() {
        if ('caches' in window) {
          caches.delete('imacx-images-cache-v1').then(() => {
            window.debugLog('✅ 图片缓存已清理');
          });
        }
      }
      
      document.addEventListener('DOMContentLoaded', () => {
        // 初始化懒加载
        initLazyImageLoader();
        
        // 注册Service Worker
        if ('serviceWorker' in navigator) {
          navigator.serviceWorker.register('/service-worker.js')
            .then((registration) => {
              // console.log('🚀 Service Worker注册成功:', registration.scope);
            })
            .catch((error) => {
              // console.error('❌ Service Worker注册失败:', error);
            });
        }
      });
      
      // 文章更新后清理图片缓存
      window.addEventListener('articlePublished', () => {
        if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
          const messageChannel = new MessageChannel();
          messageChannel.port1.onmessage = (event) => {
            window.debugLog('✅ 图片缓存已清理');
          };
          
          navigator.serviceWorker.controller.postMessage(
            { type: 'CLEAR_IMAGE_CACHE' },
            [messageChannel.port2]
          );
        }
      });
      
      window.addEventListener('articleUpdated', () => {
        if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
          const messageChannel = new MessageChannel();
          messageChannel.port1.onmessage = (event) => {
            window.debugLog('✅ 图片缓存已清理');
          };
          
          navigator.serviceWorker.controller.postMessage(
            { type: 'CLEAR_IMAGE_CACHE' },
            [messageChannel.port2]
          );
        }
      });
    </script>
  </body>
</html>