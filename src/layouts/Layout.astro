---
import Header from '../components/global/Header.astro';
import Footer from '../components/global/Footer.astro';
import LoginModal from '../components/global/LoginModal.astro';
import AdminArticleManager from '../components/global/AdminArticleManager.astro';
import '../styles/global.css';

interface Props {
  title?: string;
  description?: string;
}

const { title = 'IMACXNews', description = 'Your trusted source for breaking news from Avenues The World School' } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <meta http-equiv="Content-Security-Policy" content="script-src 'self' 'unsafe-inline' 'unsafe-eval'; object-src 'none';" />
    <title>{title}</title>
  </head>
  <body>
    <Header />
    <main>
      <slot />
    </main>
    <Footer />
    <LoginModal />
    <AdminArticleManager />
    
    <!-- External scripts for CSP compliance -->
    <script src="/scripts/smooth-scroll.js" is:inline></script>
    <script src="/scripts/admin-manager.js" is:inline></script>
    
    <!-- Image optimization script -->
    <script is:inline>
      // 图片优化和错误处理脚本
      (function() {
        // 清理无效图片缓存和数据
        function clearInvalidImageCache() {
          try {
            // 清理localStorage中的缓存数据
            const keys = Object.keys(localStorage);
            keys.forEach(key => {
              if (key.includes('homepage_articles_cache') || key.includes('imacx_articles')) {
                const data = localStorage.getItem(key);
                if (data && (data.includes('placeholder.com') || data.includes('example.com') || data.includes('via.placeholder.com'))) {
                  localStorage.removeItem(key);
                  console.log('🗑️ 清理无效缓存数据:', key);
                }
              }
            });

            // 清理Service Worker缓存
            if ('caches' in window) {
              caches.keys().then(cacheNames => {
                cacheNames.forEach(cacheName => {
                  caches.open(cacheName).then(cache => {
                    cache.keys().then(requests => {
                      requests.forEach(request => {
                        if (request.url.includes('placeholder.com') || 
                            request.url.includes('example.com') ||
                            request.url.includes('via.placeholder.com')) {
                          cache.delete(request);
                          console.log('🗑️ 清理无效图片缓存:', request.url);
                        }
                      });
                    });
                  });
                });
              });
            }
          } catch (e) {
            console.warn('清理缓存时出错:', e);
          }
        }
        
        function optimizeImages() {
          const images = document.querySelectorAll('img[src]:not(.lazy):not([data-src])');
          images.forEach(img => {
            if (img.dataset.optimized) return;
            img.dataset.optimized = 'true';
            
            const src = img.src;
            // 检测并替换无效的外部图片URL
            if (src.includes('example.com') || src.includes('placeholder.com') || src.includes('via.placeholder.com')) {
              img.src = '/images/placeholder.svg';
              console.log('🔄 替换无效图片URL:', src);
              return;
            }
            
            // 只为没有onerror处理的图片添加超时和错误处理
            if (!img.onerror || img.onerror.toString().includes('this.onerror=null')) {
              const timeout = setTimeout(() => {
                if (!img.complete) {
                  img.src = '/images/placeholder.svg';
                  console.log('⏰ 图片加载超时，使用占位图:', src);
                }
              }, 5000); // 减少到5秒超时
              
              const originalOnLoad = img.onload;
              img.onload = (e) => {
                clearTimeout(timeout);
                img.style.opacity = '1';
                if (originalOnLoad) originalOnLoad.call(img, e);
              };

              const originalOnError = img.onerror;
              img.onerror = (e) => {
                clearTimeout(timeout);
                img.src = '/images/placeholder.svg';
                img.classList.add('error');
                console.warn('❌ 图片加载失败，使用占位图:', src);
                if (originalOnError) originalOnError.call(img, e);
              };
            }
          });
        }
        
        // 初始化时清理缓存
        clearInvalidImageCache();
        
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', optimizeImages);
        } else {
          optimizeImages();
        }
        
        // 监听动态内容
        if (window.MutationObserver) {
          const observer = new MutationObserver(optimizeImages);
          observer.observe(document.body, { childList: true, subtree: true });
        }
      })();
    </script>
    <script type="module">
      // 初始化图片懒加载
      import { LazyImageLoader } from '/src/utils/imageUtils.js';
      
      document.addEventListener('DOMContentLoaded', () => {
        // 初始化懒加载
        LazyImageLoader.init();
        
        // 注册Service Worker
        if ('serviceWorker' in navigator) {
          navigator.serviceWorker.register('/service-worker.js')
            .then((registration) => {
              console.log('🚀 Service Worker注册成功:', registration.scope);
            })
            .catch((error) => {
              console.error('❌ Service Worker注册失败:', error);
            });
        }
      });
      
      // 文章更新后清理图片缓存
      window.addEventListener('articlePublished', () => {
        if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
          const messageChannel = new MessageChannel();
          messageChannel.port1.onmessage = (event) => {
            console.log('✅ 图片缓存已清理');
          };
          
          navigator.serviceWorker.controller.postMessage(
            { type: 'CLEAR_IMAGE_CACHE' },
            [messageChannel.port2]
          );
        }
      });
      
      window.addEventListener('articleUpdated', () => {
        if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
          const messageChannel = new MessageChannel();
          messageChannel.port1.onmessage = (event) => {
            console.log('✅ 图片缓存已清理');
          };
          
          navigator.serviceWorker.controller.postMessage(
            { type: 'CLEAR_IMAGE_CACHE' },
            [messageChannel.port2]
          );
        }
      });
    </script>
  </body>
</html>