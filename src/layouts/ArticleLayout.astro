---
import Layout from './Layout.astro';
import { formatDate } from '../utils/dateFormatter';
import { getCategoryById } from '../data/categories';
import ArticleCard from '../components/ui/ArticleCard.astro';
import MiniRelatedCard from '../components/ui/MiniRelatedCard.astro';
import { createDatabaseConnection, withRetry } from '../lib/database';

const { article } = Astro.props;
const category = getCategoryById(article.category);

// Force fetch related articles from database
type Article = {
  id: number;
  title: string;
  slug: string;
  excerpt: string;
  content: string;
  chineseContent: string | null;
  category: string;
  image: string;
  imageAlt: string | null;
  imageCaption: string | null;
  author: string;
  publishDate: Date;
  featured: boolean;
  contentLength: number | null;
  readingTime: number | null;
  mediaType: string;
  videoUrl: string | null;
  videoPoster: string | null;
  videoDuration: number | null;
};

let relatedArticles: Article[] = [];
try {
  const prisma = createDatabaseConnection();
  relatedArticles = await withRetry(async () => {
    // First find articles in the same category
    const sameCategoryArticles = await prisma.article.findMany({
      where: { 
        id: { not: article.id },
        category: article.category 
      },
      select: {
        id: true,
        title: true,
        slug: true,
        excerpt: true,
        content: true,
        chineseContent: true,
        category: true,
        image: true,
        imageAlt: true,
        imageCaption: true,
        author: true,
        publishDate: true,
        featured: true,
        contentLength: true,
        readingTime: true,
        mediaType: true,
        videoUrl: true,
        videoPoster: true,
        videoDuration: true,
      },
      orderBy: { publishDate: 'desc' },
      take: 3
    });
    
    // If not enough articles in same category, supplement with others
    if (sameCategoryArticles.length < 3) {
      const otherArticles = await prisma.article.findMany({
        where: { 
          id: { not: article.id },
          category: { not: article.category }
        },
        select: {
          id: true,
          title: true,
          slug: true,
          excerpt: true,
          content: true,
          chineseContent: true,
          category: true,
          image: true,
          imageAlt: true,
          imageCaption: true,
          author: true,
          publishDate: true,
          featured: true,
          contentLength: true,
          readingTime: true,
          mediaType: true,
          videoUrl: true,
          videoPoster: true,
          videoDuration: true,
        },
        orderBy: { publishDate: 'desc' },
        take: 3 - sameCategoryArticles.length
      });
      return [...sameCategoryArticles, ...otherArticles];
    }
    
    return sameCategoryArticles;
  }, `Get related articles for article: ${article.id}`);
} catch (e: any) {
  console.error('Database connection failed, unable to load related articles:', e?.message);
  relatedArticles = [];
}

const title = `${article.title} | IMACX-news`;
const description = article.excerpt;
---

<Layout title={title} description={description}>
  <article class="article-container">
    <div class="container">
      <header class="article-header">
        <a href={`/category/${article.category}`} class={`category-tag ${article.category}`}>
          {(category && category.name) || 'Category'}
        </a>
        
        <h1 class="article-title">{article.title}</h1>
        
        <p class="article-excerpt">{article.excerpt}</p>
        
        <div class="article-meta">
          <div class="author-info">
            <span class="author-name">By {article.author}</span>
          </div>
          
          <time datetime={article.publishDate} class="publish-date">
            {formatDate(article.publishDate, 'MMMM d, yyyy')}
          </time>
        </div>
      </header>
      
      <div class="article-featured-media">
        {article.mediaType === 'VIDEO' && article.videoUrl ? (
          <div 
            class="article-video-container" 
            id="articleVideoContainer"
            data-video-url={article.videoUrl}
            data-video-poster={article.videoPoster || article.image}
            data-video-duration={article.videoDuration || 0}
          >
            <!-- Video content will be inserted by JavaScript -->
          </div>
        ) : (
          <img 
            src={article.image} 
            alt={article.title} 
            loading="eager"
            width="1200"
            height="675"
            class="article-image"
          />
        )}
      </div>
      
      <div class="article-content">
        <div class="english-content" set:html={article.content} />
        {article.chineseContent && (
          <>
            <hr class="content-divider" />
            <div class="chinese-content" set:html={article.chineseContent} />
          </>
        )}
      </div>
      
      {relatedArticles.length > 0 && (
        <div class="related-articles">
          <h2 class="related-title">Related Articles</h2>
          
          <div class="related-grid">
            {relatedArticles.map((relatedArticle) => (
              <MiniRelatedCard article={relatedArticle} />
            ))}
          </div>
        </div>
      )}
    </div>
  </article>
</Layout>

<style>
  .article-container {
    margin: var(--space-8) 0;
  }
  
  .article-header {
    margin-bottom: var(--space-6);
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .article-title {
    font-size: 2rem;
    line-height: 1.2;
    margin: var(--space-3) 0;
    color: var(--color-text);
  }
  
  .article-excerpt {
    font-size: 1.25rem;
    color: var(--color-text-light);
    line-height: 1.5;
    margin-bottom: var(--space-4);
  }
  
  .article-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.875rem;
    color: var(--color-text-light);
    padding-bottom: var(--space-4);
    border-bottom: 1px solid var(--color-border);
  }
  
  .author-name {
    font-weight: 500;
  }
  
  .article-featured-media {
    margin-bottom: var(--space-6);
    border-radius: var(--radius-lg);
    overflow: hidden;
    aspect-ratio: 16 / 9;
  }
  
  .article-image {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover;
  }

  .article-video-container {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .article-video {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover;
    background: #000;
  }

  .video-duration-info {
    position: absolute;
    bottom: 10px;
    right: 10px;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 500;
    z-index: 2;
  }
  
  .article-content {
    max-width: 800px;
    margin: 0 auto var(--space-12);
    font-size: 1.125rem;
    line-height: 1.7;
  }

  .english-content,
  .chinese-content {
    white-space: pre-wrap; /* ‰øùÊåÅÊç¢Ë°åÁ¨¶ÂíåÁ©∫Ê†ºÊ†ºÂºè */
  }
  
  .article-content p {
    margin-bottom: 1.5em;
  }

  .content-divider {
    margin: var(--space-8) 0;
    border: none;
    border-top: 1px solid var(--color-border);
  }

  .chinese-content {
    font-size: 1.125rem;
    line-height: 1.8;
  }
  
  .related-articles {
    padding-top: var(--space-8);
    border-top: 1px solid var(--color-border);
  }
  
  .related-title {
    margin-bottom: var(--space-6);
    font-size: 1.5rem;
  }
  
  .related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--space-4);
    max-width: 1000px;
    margin: 0 auto;
  }
  
  @media (min-width: 768px) {
    .article-title {
      font-size: 3rem;
    }
    
    .article-featured-image {
      margin-left: calc(-1 * var(--space-8));
      margin-right: calc(-1 * var(--space-8));
      width: calc(100% + var(--space-16));
    }
  }
  
  @media (max-width: 768px) {
    .article-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-2);
    }
    
    .article-title {
      font-size: 2rem;
    }
    
    .related-grid {
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: var(--space-3);
    }
  }
  
  @media (max-width: 480px) {
    .related-grid {
      grid-template-columns: 1fr;
      gap: var(--space-2);
    }
    
    .related-title {
      font-size: 1.25rem;
      margin-bottom: var(--space-4);
    }
  }
</style>

<script>
  // üé• Video rendering for article detail page
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.getElementById('articleVideoContainer');
    if (!container) return;
    
    // Get article data from the page (use dataset attributes to avoid template literal issues)
    const videoData = {
      videoUrl: container.dataset.videoUrl || '{article.videoUrl}',
      videoPoster: container.dataset.videoPoster || '{article.videoPoster || article.image}',
      videoDuration: parseInt(container.dataset.videoDuration || '{article.videoDuration || 0}')
    };
    
    if (!videoData.videoUrl || videoData.videoUrl === 'undefined') return;
    
    // üé¨ Check if this is a YouTube or Vimeo URL
    function isEmbeddableVideo(url: string) {
      if (!url) return false;
      try {
        const hostname = new URL(url.includes('http') ? url : 'https://' + url).hostname.toLowerCase();
        return hostname.includes('youtube.com') || hostname.includes('youtu.be') || hostname.includes('vimeo.com');
      } catch (e) {
        return false;
      }
    }
    
    // üé¨ Convert regular video URLs to embed format
    function convertToEmbedUrl(url: string) {
      try {
        let videoUrl = url.trim();
        if (!videoUrl.match(/^https?:\/\//)) {
          videoUrl = 'https://' + videoUrl;
        }
        
        const parsedUrl = new URL(videoUrl);
        const hostname = parsedUrl.hostname.toLowerCase();
        
        // YouTube URLs
        if (hostname.includes('youtube.com') || hostname.includes('youtu.be')) {
          let videoId;
          
          if (hostname.includes('youtu.be')) {
            videoId = parsedUrl.pathname.slice(1);
          } else if (parsedUrl.searchParams.has('v')) {
            videoId = parsedUrl.searchParams.get('v');
          } else {
            const match = parsedUrl.pathname.match(/\/embed\/([^/?]+)/);
            if (match) videoId = match[1];
          }
          
          if (videoId) {
            return `https://www.youtube.com/embed/${videoId}`;
          }
        }
        
        // Vimeo URLs
        if (hostname.includes('vimeo.com')) {
          const match = parsedUrl.pathname.match(/\/(\d+)/);
          if (match) {
            return `https://player.vimeo.com/video/${match[1]}`;
          }
        }
        
        return url; // Return original if conversion fails
      } catch (error) {
        console.warn('Failed to convert video URL:', error);
        return url;
      }
    }
    
    const isEmbeddable = isEmbeddableVideo(videoData.videoUrl);
    
    if (isEmbeddable) {
      // Render YouTube/Vimeo as iframe
      const embedUrl = convertToEmbedUrl(videoData.videoUrl);
      container.innerHTML = `
        <iframe 
          src="${embedUrl}"
          width="100%" 
          height="100%"
          style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none;"
          frameborder="0"
          allowfullscreen
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        ></iframe>
      `;
      console.log('‚úÖ Article video rendered as iframe:', embedUrl);
    } else {
      // Render direct video file as HTML5 video
      container.innerHTML = `
        <video 
          controls 
          poster="${videoData.videoPoster || '/images/placeholder.svg'}"
          preload="metadata"
          playsinline
          width="1200"
          height="675"
          class="article-video"
          style="width: 100%; height: 100%; object-fit: cover; background: #000;"
        >
          <source src="${videoData.videoUrl}" type="video/mp4">
          <source src="${videoData.videoUrl}" type="video/webm">
          Your browser does not support the video tag.
        </video>
        ${videoData.videoDuration ? `
          <div class="video-duration-info">
            Duration: ${Math.floor(videoData.videoDuration / 60)}:${(videoData.videoDuration % 60).toString().padStart(2, '0')}
          </div>
        ` : ''}
      `;
      console.log('‚úÖ Article video rendered as HTML5 video:', videoData.videoUrl);
    }
  });
</script>