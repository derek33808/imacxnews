---
import Layout from '../layouts/Layout.astro';
import FeaturedArticle from '../components/ui/FeaturedArticle.astro';
import ArticleCard from '../components/ui/ArticleCard.astro';
import { initialArticlesData } from '../data/articles.js';
import { categories } from '../data/categories';

// Use initial articles for SSR, client will update with localStorage data
const allArticles = initialArticlesData || [];

// Get featured articles
const featuredArticles = allArticles.filter(article => article.featured);

// Get latest articles from the last 30 days (fallback to newest 8 if none)
const now = new Date();
const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
const latestLast30Days = allArticles
  .filter(a => new Date(a.publishDate) >= thirtyDaysAgo)
  .sort((a, b) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime());
const newestEight = [...allArticles]
  .sort((a, b) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime())
  .slice(0, 8);
const latestArticles = latestLast30Days.length > 0 ? latestLast30Days : newestEight;

// Get main featured article
const mainFeaturedArticle = featuredArticles.length > 0 ? featuredArticles[0] : latestArticles[0];

// Get other articles for the grid (excluding the main featured)
const otherArticles = latestArticles.filter(article => article.id !== mainFeaturedArticle?.id);
---

<Layout>
  <div class="container">
    <!-- Main featured article -->
    {mainFeaturedArticle && (
      <section class="hero-section">
        <h2>Featured Article</h2>
        <FeaturedArticle article={mainFeaturedArticle} />
      </section>
    )}
    
    <!-- Category selection -->
    <section class="categories-section">
      <h2 class="section-title">Browse by Category</h2>
      
      <div class="categories-grid">
        {categories.map(category => (
          <a href={`/category/${category.id}`} class="category-card">
            <div class="category-icon" style={`background-color: ${category.color}`}>
              <span class="category-initial">{category.name.charAt(0)}</span>
            </div>
            <h3 class="category-name">{category.name}</h3>
          </a>
        ))}
      </div>
    </section>
    
    <!-- Latest news (last 30 days, small thumbnails grid) -->
    <section class="latest-news">
      <h2 class="section-title">Latest News (Last 30 Days)</h2>
      <div class="latest-grid" id="latestArticlesGrid">
        {otherArticles.map((article) => (
          <a href={`/article/${article.slug}`} class="thumb-card overlay">
            <div class="thumb-image-wrap">
              <img 
                src={article.image} 
                alt={article.title} 
                class="thumb-img"
                loading="lazy"
                width="560"
                height="315"
                onerror="this.src='https://images.pexels.com/photos/1181263/pexels-photo-1181263.jpeg?auto=compress&cs=tinysrgb&w=560&h=315'"
              />
              <div class="thumb-gradient"></div>
              <div class="thumb-text">
                <div class="thumb-title white">{article.title}</div>
                <div class="thumb-date white">Updated {new Date(article.publishDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</div>
              </div>
            </div>
          </a>
        ))}
      </div>
      <div class="view-all-container">
        <button id="toggleAllArticlesBtn" class="btn view-all-btn" type="button" aria-expanded="false" aria-controls="allArticlesSection">View All News</button>
      </div>
    </section>
    
    <!-- All Articles Section (compact index with tiny thumbnails) -->
    <section class="all-articles is-collapsed" id="allArticlesSection" aria-hidden="true">
      <h2 class="section-title">All Articles</h2>
      <div class="all-index" id="allArticlesList">
        {[...allArticles]
          .sort((a, b) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime())
          .map((article) => (
            <a href={`/article/${article.slug}`} class="index-row">
              <img 
                src={article.image} 
                alt={article.title}
                class="index-thumb"
                loading="lazy"
                width="56"
                height="56"
                onerror="this.src='https://images.pexels.com/photos/1181263/pexels-photo-1181263.jpeg?auto=compress&cs=tinysrgb&w=56&h=56'"
              />
              <div class="index-meta">
                <div class="index-title">{article.title}</div>
                <div class="index-sub">{new Date(article.publishDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</div>
              </div>
            </a>
          ))}
      </div>
    </section>
    
    <!-- Newsletter signup -->
    <section class="newsletter-section">
      <div class="newsletter-container">
        <div class="newsletter-content">
          <h2 class="newsletter-title">Stay Informed</h2>
          <p class="newsletter-description">
            Subscribe to our newsletter and never miss breaking news, exclusive stories, and important updates.
          </p>
        </div>
        
        <form class="newsletter-form">
          <input type="email" placeholder="Enter your email address" required>
          <button type="submit" class="btn">Subscribe</button>
        </form>
      </div>
    </section>
  </div>
</Layout>

<script>
  /**
   * @typedef {Object} Article
   * @property {number} id
   * @property {string} slug
   * @property {string} title
   * @property {string} excerpt
   * @property {string} content
   * @property {string} chineseContent
   * @property {string} category
   * @property {string} image
   * @property {string} author
   * @property {string} publishDate
   * @property {boolean} featured
   */
  // Newsletter form submission
  const newsletterForm = document.querySelector('.newsletter-form');
  
  if (newsletterForm) {
    newsletterForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const tgt = e.target;
      if (!(tgt instanceof HTMLFormElement)) return;
      const formEl = tgt;
      const emailInput = formEl.querySelector('input[type="email"]');
      let email = '';
      if (emailInput instanceof HTMLInputElement) {
        email = emailInput.value;
      }
      
      console.log('Subscribed email:', email);
      alert('Thank you for subscribing to our newsletter!');
      formEl.reset();
    });
  }
  
  // Small thumbnail card (for Latest News)
  /**
   * @param {any} article
   * @returns {string}
   */
  function renderSmallThumbCard(article: any) {
    const date = new Date(article.publishDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
    return `
      <a href="/article/${article.slug}" class="thumb-card overlay">
        <div class="thumb-image-wrap">
          <img 
            src="${article.image}" 
            alt="${article.title}" 
            class="thumb-img"
            loading="lazy"
            width="560"
            height="315"
            onerror="this.src='https://images.pexels.com/photos/1181263/pexels-photo-1181263.jpeg?auto=compress&cs=tinysrgb&w=560&h=315'"
          />
          <div class="thumb-gradient"></div>
          <div class="thumb-text">
            <div class="thumb-title">${article.title}</div>
            <div class="thumb-date">Updated ${date}</div>
          </div>
        </div>
      </a>
    `;
  }

  // Compact index row (for All Articles)
  /**
   * @param {any} article
   * @returns {string}
   */
  function renderIndexRow(article: any) {
    const date = new Date(article.publishDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
    return `
      <a href="/article/${article.slug}" class="index-row">
        <img 
          src="${article.image}" 
          alt="${article.title}"
          class="index-thumb"
          loading="lazy"
          width="56"
          height="56"
          onerror="this.src='https://images.pexels.com/photos/1181263/pexels-photo-1181263.jpeg?auto=compress&cs=tinysrgb&w=56&h=56'"
        />
        <div class="index-meta">
          <div class="index-title">${article.title}</div>
          <div class="index-sub">${date}</div>
        </div>
      </a>
    `;
  }
  
  // (relative time helper not used on homepage now)
  
  // Update page with client-side articles
  function updatePageWithClientArticles() {
    try {
      console.log('Updating page with client articles...');
      
      // Get articles from localStorage
      const storedArticles = localStorage.getItem('imacx_articles');
      /** @type {Article[]} */
      let clientArticles = [];
      
      if (storedArticles) {
        clientArticles = /** @type {Article[]} */ (JSON.parse(storedArticles));
        console.log('Client articles loaded:', clientArticles.length);
        const titles = [];
        for (const art of clientArticles) {
          const a = /** @type {Article} */ (art);
          titles.push(`${a.id}: ${a.title}`);
        }
        console.log('Client articles:', titles);
      } else {
        console.log('No stored articles found');
        return;
      }
      
      // Update debug info
      console.log('Client articles count:', clientArticles.length);
      
      // Sort articles by date (newest first)
      /** @type {Article[]} */
      const sortedArticles = [...clientArticles].sort((a, b) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime());
      
      // Get featured articles
      const featuredArticles = sortedArticles.filter(article => article.featured);
      const mainFeatured = featuredArticles.length > 0 ? featuredArticles[0] : sortedArticles[0];
      
      // Get other articles (excluding main featured)
      const otherArticles = sortedArticles.filter(article => article.id !== mainFeatured?.id);
      
      // Compute last 30 days list (fallback to newest 8 if empty)
      const now = new Date();
      const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
      const last30 = sortedArticles.filter((/** @type {any} */ article) => new Date(article.publishDate) >= thirtyDaysAgo);
      const latestForGrid = (last30.length > 0 ? last30 : sortedArticles).slice(0, 8);

      // Update latest articles grid (last 30 days)
      const latestArticlesGrid = document.getElementById('latestArticlesGrid');
      if (latestArticlesGrid) {
        if (latestForGrid.length > 0) {
          const renderedHTML = latestForGrid.map(article => renderSmallThumbCard(article)).join('');
          latestArticlesGrid.innerHTML = renderedHTML;
        } else {
          latestArticlesGrid.innerHTML = '<p class="no-articles">No recent articles in the last 30 days.</p>';
        }
      }
      
      // Update all articles compact list
      const allArticlesList = document.getElementById('allArticlesList');
      if (allArticlesList) {
        if (sortedArticles.length > 0) {
          const allRenderedHTML = sortedArticles.map(article => renderIndexRow(article)).join('');
          allArticlesList.innerHTML = allRenderedHTML;
        } else {
          allArticlesList.innerHTML = '<p class="no-articles">No articles found.</p>';
        }
      }
      
      console.log('Page updated successfully with', clientArticles.length, 'articles');
      
    } catch (error) {
      const err = /** @type {unknown} */ (error);
      console.error('Error updating page with client articles:', err);
      const stack = (err && typeof err === 'object' && 'stack' in err) ? /** @type {{stack?: string}} */ (err).stack : '';
      console.error('Error stack:', stack || '');
    }
  }

  // Update Featured Article section - only update specific elements to preserve styles
  function updateFeaturedArticle(article: any) {
    const featuredArticle = document.querySelector('.featured-article');
    if (!featuredArticle) return;
    
    const categoryDisplay = article.category === 'TodayNews' ? 'Today News' : 'Past News';
    const formattedDate = new Date(article.publishDate).toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric' 
    });
    
    // Update image
    const featuredImage = featuredArticle.querySelector('.featured-image') as HTMLImageElement;
    if (featuredImage) {
      featuredImage.src = article.image;
      featuredImage.alt = article.title;
    }
    
    // Update category tag
    const categoryTag = featuredArticle.querySelector('.category-tag');
    if (categoryTag) {
      categoryTag.textContent = categoryDisplay;
      categoryTag.className = `category-tag ${article.category}`;
      (categoryTag as HTMLAnchorElement).href = `/category/${article.category}`;
    }
    
    // Update title
    const titleLink = featuredArticle.querySelector('.featured-title a');
    if (titleLink) {
      titleLink.textContent = article.title;
      (titleLink as HTMLAnchorElement).href = `/article/${article.slug}`;
    }
    
    // Update excerpt
    const excerpt = featuredArticle.querySelector('.featured-excerpt');
    if (excerpt) {
      excerpt.textContent = article.excerpt;
    }
    
    // Update author
    const author = featuredArticle.querySelector('.featured-author');
    if (author) {
      author.textContent = article.author;
    }
    
    // Update date
    const date = featuredArticle.querySelector('.featured-date');
    if (date) {
      date.textContent = formattedDate;
    }
    
    // Update read more link
    const readMoreLink = featuredArticle.querySelector('.featured-read-more');
    if (readMoreLink) {
      (readMoreLink as HTMLAnchorElement).href = `/article/${article.slug}`;
    }
  }

  // Fetch from API and overlay homepage content (A4) - with smart caching
  async function overlayWithApiArticles() {
    try {
      // Cache configuration
      const cacheKey = 'homepage_articles_cache';
      const cacheTimeKey = 'homepage_articles_cache_time';
      const CACHE_DURATION = 30000; // 30 seconds cache
      
      const cachedData = localStorage.getItem(cacheKey);
      const cacheTime = localStorage.getItem(cacheTimeKey);
      const currentTime = Date.now();
      
      let apiArticles = null;
      
      // Check if we have valid cached data
      if (cachedData && cacheTime && (currentTime - parseInt(cacheTime)) < CACHE_DURATION) {
        console.log('🚀 Homepage: Using cached articles data - instant load!');
        apiArticles = JSON.parse(cachedData);
      } else {
        console.log('📡 Homepage: Fetching fresh articles data from API...');
        
        // Create abort controller for request timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
          controller.abort();
          console.warn('⏰ Homepage: API request timed out after 8 seconds');
        }, 8000); // 8 second timeout
        
        try {
          const res = await fetch('/api/articles', {
            signal: controller.signal
          });
          clearTimeout(timeoutId);
          
          if (!res.ok) {
            throw new Error(`API responded with status: ${res.status}`);
          }
          apiArticles = await res.json();
          
          // Cache the fresh data
          localStorage.setItem(cacheKey, JSON.stringify(apiArticles));
          localStorage.setItem(cacheTimeKey, currentTime.toString());
          console.log('✅ Homepage: Fresh data fetched and cached');
        } catch (fetchError) {
          clearTimeout(timeoutId);
          throw fetchError;
        }
      }
      
      if (!Array.isArray(apiArticles)) return;

      // Sort by publishDate desc
      const sorted = [...apiArticles].sort((a, b) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime());

      // Update Featured Article with latest article
      const featuredArticles = sorted.filter(a => a.featured);
      const mainFeaturedArticle = featuredArticles.length > 0 ? featuredArticles[0] : sorted[0];
      
      if (mainFeaturedArticle) {
        updateFeaturedArticle(mainFeaturedArticle);
      }

      // Latest grid: last 30 days fallback to newest 8
      const nowDate = new Date();
      const thirtyDaysAgo = new Date(nowDate.getTime() - 30 * 24 * 60 * 60 * 1000);
      const last30 = sorted.filter(a => new Date(a.publishDate) >= thirtyDaysAgo);
      const latestForGrid = (last30.length > 0 ? last30 : sorted).slice(0, 8);

      const latestArticlesGrid = document.getElementById('latestArticlesGrid');
      if (latestArticlesGrid) {
        latestArticlesGrid.innerHTML = latestForGrid.length
          ? latestForGrid.map(renderSmallThumbCard).join('')
          : '<p class="no-articles">No recent articles in the last 30 days.</p>';
      }

      const allArticlesList = document.getElementById('allArticlesList');
      if (allArticlesList) {
        allArticlesList.innerHTML = sorted.length
          ? sorted.map(renderIndexRow).join('')
          : '<p class="no-articles">No articles found.</p>';
      }
    } catch (err) {
      console.error('❌ Homepage: Error overlaying articles from API:', err);
      // Fallback to existing content - no action needed as SSR content is already displayed
      console.log('🔄 Homepage: Keeping SSR content as fallback');
    }
  }
  
  // Initialize articles and update page
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      console.log('Index page script loaded');
      console.log('Initializing articles...');
      
      const { initializeArticles } = await import('../data/articles.js');
      const articles = initializeArticles();
      console.log('Articles initialized successfully:', articles.length);
      
      // Log each article for debugging
      articles.forEach((article, index) => {
        console.log(`Article ${index + 1}:`, article.title, `(ID: ${article.id})`);
      });
      
      // Update the page with client-side data (fallback)
      updatePageWithClientArticles();
      // Overlay with server data from API
      overlayWithApiArticles();
      
      // Toggle All Articles section
      const toggleBtn = document.getElementById('toggleAllArticlesBtn');
      const allSection = document.getElementById('allArticlesSection');
      if (toggleBtn && allSection) {
        const expand = (expandNow: boolean) => {
          if (expandNow) {
            allSection.classList.remove('is-collapsed');
            allSection.classList.add('is-expanded');
            allSection.setAttribute('aria-hidden', 'false');
            toggleBtn.setAttribute('aria-expanded', 'true');
          } else {
            allSection.classList.remove('is-expanded');
            allSection.classList.add('is-collapsed');
            allSection.setAttribute('aria-hidden', 'true');
            toggleBtn.setAttribute('aria-expanded', 'false');
          }
        };
        // Default collapsed
        expand(false);
        toggleBtn.addEventListener('click', () => {
          const currentlyExpanded = toggleBtn.getAttribute('aria-expanded') === 'true';
          expand(!currentlyExpanded);
        });
      }

    } catch (error) {
      const err = /** @type {unknown} */ (error);
      console.error('Error initializing articles:', err);
    }
  });
  
  // Debounced update mechanism for homepage
  let homepageUpdateTimeout: NodeJS.Timeout;
  function debouncedHomepageUpdate() {
    clearTimeout(homepageUpdateTimeout);
    homepageUpdateTimeout = setTimeout(() => {
      // Clear cache to force fresh data
      localStorage.removeItem('homepage_articles_cache');
      localStorage.removeItem('homepage_articles_cache_time');
      console.log('🚀 Homepage: Cache cleared, refreshing data...');
      overlayWithApiArticles();
    }, 1000); // 1 second debounce
  }

  // Page visibility API - only update when page is visible
  document.addEventListener('visibilitychange', function() {
    if (document.visibilityState === 'visible') {
      console.log('👁️ Homepage: Page became visible, checking for updates...');
      debouncedHomepageUpdate();
    }
  });

  // Listen for storage changes (when articles are added/updated)
  window.addEventListener('storage', (e) => {
    if (e.key === 'imacx_articles') {
      console.log('📋 Homepage: Articles updated in localStorage, refreshing...');
      debouncedHomepageUpdate();
    }
  });
  
  // Listen for custom events when articles are added/updated
  window.addEventListener('articleAdded', () => {
    console.log('📢 Homepage: Article added event received');
    debouncedHomepageUpdate();
  });

  window.addEventListener('articlePublished', () => {
    console.log('📢 Homepage: Article published event received');
    debouncedHomepageUpdate();
  });

  window.addEventListener('articleUpdated', () => {
    console.log('📢 Homepage: Article updated event received');
    debouncedHomepageUpdate();
  });

  // Listen for logout events to clear cache
  window.addEventListener('userLoggedOut', () => {
    console.log('🚪 Homepage: User logged out, clearing cache...');
    localStorage.removeItem('homepage_articles_cache');
    localStorage.removeItem('homepage_articles_cache_time');
  });
</script>

<style>
  .debug-info {
    background-color: var(--color-background-alt);
    padding: var(--space-4);
    border-radius: var(--radius-md);
    margin-bottom: var(--space-6);
    border: 1px solid var(--color-border);
  }
  
  .debug-info h3, .debug-info h4 {
    margin-bottom: var(--space-2);
    color: var(--color-text);
  }
  
  .debug-info p {
    margin-bottom: var(--space-2);
    color: var(--color-text-light);
  }
  
  .articles-list {
    margin-top: var(--space-4);
  }
  
  .article-debug {
    padding: var(--space-2);
    margin-bottom: var(--space-1);
    background-color: var(--color-background);
    border-radius: var(--radius-sm);
    font-size: 0.875rem;
  }
  
  .category {
    color: var(--color-primary);
    font-weight: 500;
  }
  
  .featured {
    color: #dc2626;
    font-weight: 600;
  }
  
  .no-articles {
    text-align: center;
    padding: var(--space-8);
    color: var(--color-text-light);
  }
  
  .section-title {
    font-size: 1.75rem;
    margin-bottom: var(--space-6);
    position: relative;
    padding-bottom: var(--space-3);
  }
  
  .section-title::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 50px;
    height: 3px;
    background-color: var(--color-primary);
  }
  
  .hero-section {
    margin-top: var(--space-6);
  }
  
  .categories-section {
    margin: var(--space-12) 0;
  }
  
  .categories-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--space-4);
  }
  
  .category-card {
    display: flex;
    align-items: center;
    gap: var(--space-4);
    padding: var(--space-4);
    border-radius: var(--radius-md);
    background-color: var(--color-background);
    border: 1px solid var(--color-border);
    text-decoration: none;
    color: var(--color-text);
    transition: transform var(--transition), box-shadow var(--transition);
  }
  
  .category-card:hover {
    transform: translateY(-3px);
    box-shadow: var(--shadow-md);
  }
  
  .category-icon {
    width: 50px;
    height: 50px;
    min-width: 50px;
    min-height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    color: white;
    font-weight: 700;
    font-size: 1.25rem;
    flex-shrink: 0;
  }
  
  .category-name {
    font-size: 1.125rem;
    margin: 0;
  }
  
  .latest-news,
  .all-articles {
    margin: var(--space-12) 0;
  }
  
  /* Latest small thumbnails grid (global so JS-inserted HTML is styled) */
  :global(.latest-grid) {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--space-6);
    margin-bottom: var(--space-8);
  }

  :global(.thumb-card) {
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
    text-decoration: none;
    color: var(--color-text);
    background-color: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    padding: 0;
    transition: transform var(--transition), box-shadow var(--transition);
  }

  :global(.thumb-card:hover) {
    transform: translateY(-2px);
    box-shadow: var(--shadow-sm);
  }

  :global(.thumb-image-wrap) {
    position: relative;
    width: 100%;
    aspect-ratio: 16 / 9;
    overflow: hidden;
    border-radius: var(--radius-md);
  }

  :global(.thumb-img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: var(--radius-md);
  }

  :global(.thumb-gradient) {
    position: absolute;
    inset: 0;
    background: linear-gradient(to bottom, rgba(0,0,0,0.05) 20%, rgba(0,0,0,0.7) 100%);
    border-radius: var(--radius-md);
  }

  :global(.thumb-text) {
    position: absolute;
    left: var(--space-3);
    right: var(--space-3);
    bottom: var(--space-3);
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
  }

  :global(.thumb-title) {
    color: #fff;
    font-weight: 700;
    font-size: 1.1rem;
    line-height: 1.35;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-shadow: 0 1px 2px rgba(0,0,0,0.5);
  }

  :global(.thumb-date) {
    font-size: 0.85rem;
    color: rgba(255,255,255,0.9);
    text-shadow: 0 1px 2px rgba(0,0,0,0.5);
  }

  /* All articles compact list (global for JS-inserted HTML) */
  :global(.all-index) {
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
  }

  :global(.index-row) {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    padding: var(--space-2);
    text-decoration: none;
    color: var(--color-text);
    border-radius: var(--radius-sm);
    transition: background-color var(--transition);
  }

  :global(.index-row:hover) {
    background-color: var(--color-background-alt);
  }

  :global(.index-thumb) {
    width: 56px;
    height: 56px;
    border-radius: var(--radius-sm);
    object-fit: cover;
    flex-shrink: 0;
  }

  :global(.index-meta) {
    display: flex;
    flex-direction: column;
    gap: 2px;
  }

  :global(.index-title) {
    font-size: 0.95rem;
    line-height: 1.3;
  }

  :global(.index-sub) {
    font-size: 0.8rem;
    color: var(--color-text-light);
  }
  .articles-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--space-6);
    margin-bottom: var(--space-8);
  }
  
  .articles-list {
    display: block;
    margin-bottom: var(--space-8);
  }
  
  .view-all-container {
    display: flex;
    justify-content: center;
    margin-top: var(--space-8);
  }
  
  .view-all-btn {
    padding: var(--space-4) var(--space-8);
    font-size: 1.05rem;
    font-weight: 600;
    min-width: 220px;
  }
  
  /* Collapsible All Articles */
  .all-articles.is-collapsed {
    max-height: 0;
    overflow: hidden;
    padding-top: 0;
    padding-bottom: 0;
    margin-top: 0;
    margin-bottom: 0;
    opacity: 0;
    transition: max-height 0.4s ease, opacity 0.3s ease, margin 0.3s ease, padding 0.3s ease;
  }
  .all-articles.is-expanded {
    max-height: 2000px; /* large enough */
    opacity: 1;
    transition: max-height 0.5s ease, opacity 0.3s ease;
  }
  
  .newsletter-section {
    margin: var(--space-12) 0;
  }
  
  .newsletter-container {
    background-color: var(--color-primary);
    color: white;
    padding: var(--space-8);
    border-radius: var(--radius-lg);
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    gap: var(--space-6);
  }
  
  .newsletter-title {
    font-size: 2rem;
    margin-bottom: var(--space-3);
    color: #fff;
  }
  
  .newsletter-description {
    max-width: 600px;
    font-size: 1.125rem;
    margin: 0 auto;
    color: rgba(255,255,255,0.9);
  }
  
  .newsletter-form {
    display: flex;
    gap: var(--space-2);
    width: 100%;
    max-width: 500px;
    flex-direction: column;
  }
  
  .newsletter-form input {
    padding: var(--space-3) var(--space-4);
    border: none;
    border-radius: var(--radius-md);
    font-size: 1rem;
    flex: 1;
  }
  
  .newsletter-form .btn {
    background-color: rgba(255,255,255,0.15);
    color: #fff;
    padding: var(--space-3) var(--space-4);
    border: 1px solid rgba(255,255,255,0.5);
  }
</style>