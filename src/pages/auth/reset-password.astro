---
export const prerender = false;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reset Password - IMACX News</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }
    
    .container {
      background: white;
      border-radius: 16px;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      padding: 40px;
      width: 100%;
      max-width: 500px;
    }
    
    .header {
      text-align: center;
      margin-bottom: 40px;
    }
    
    .logo {
      font-size: 32px;
      font-weight: 700;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 10px;
    }
    
    .subtitle {
      color: #6b7280;
      font-size: 16px;
    }
    
    .form-group {
      margin-bottom: 25px;
    }
    
    label {
      display: block;
      color: #374151;
      font-weight: 600;
      margin-bottom: 8px;
      font-size: 14px;
    }
    
    input[type="password"] {
      width: 100%;
      padding: 14px 16px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 16px;
      transition: border-color 0.2s, box-shadow 0.2s;
    }
    
    input[type="password"]:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    .password-help {
      margin-top: 6px;
      font-size: 12px;
      color: #6b7280;
    }
    
    .submit-btn {
      width: 100%;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      padding: 16px;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: transform 0.2s, box-shadow 0.2s;
      margin-bottom: 20px;
    }
    
    .submit-btn:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 8px 15px rgba(102, 126, 234, 0.3);
    }
    
    .submit-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    
    .loading-spinner {
      display: none;
      width: 20px;
      height: 20px;
      border: 2px solid transparent;
      border-top: 2px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-right: 8px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .alert {
      padding: 12px 16px;
      border-radius: 8px;
      margin-bottom: 20px;
      font-size: 14px;
    }
    
    .alert.error {
      background: #fef2f2;
      border: 1px solid #fecaca;
      color: #991b1b;
    }
    
    .alert.success {
      background: #f0fdf4;
      border: 1px solid #bbf7d0;
      color: #166534;
    }
    
    .alert.loading {
      background: #eff6ff;
      border: 1px solid #bfdbfe;
      color: #1d4ed8;
    }
    
    .back-link {
      text-align: center;
      margin-top: 20px;
    }
    
    .back-link a {
      color: #667eea;
      text-decoration: none;
      font-weight: 500;
    }
    
    .back-link a:hover {
      text-decoration: underline;
    }
    
    .hidden {
      display: none;
    }
    
    .token-expired {
      text-align: center;
      padding: 40px;
    }
    
    .token-expired .icon {
      font-size: 48px;
      margin-bottom: 20px;
    }
    
    .retry-btn {
      background: #6b7280;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      margin-top: 20px;
    }
    
    .retry-btn:hover {
      background: #4b5563;
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Loading State -->
    <div id="loadingState">
      <div class="header">
        <div class="logo">IMACX News</div>
        <div class="subtitle">Verifying reset link...</div>
      </div>
      <div class="alert loading">
        <span class="loading-spinner" style="display: inline-block;"></span>
        Please wait, verifying your reset link...
      </div>
    </div>
    
    <!-- Invalid Token State -->
    <div id="invalidTokenState" class="hidden">
      <div class="token-expired">
        <div class="icon">‚ö†Ô∏è</div>
        <h2 style="color: #dc2626; margin-bottom: 15px;">Reset Link Invalid or Expired</h2>
        <p style="color: #6b7280; margin-bottom: 20px;">
          Your password reset link may have expired or already been used. Please request a new password reset.
        </p>
        <button class="retry-btn" onclick="window.location.href='/auth/forgot-password'">
          Request New Password Reset
        </button>
      </div>
      <div class="back-link">
        <a href="/auth/login">Back to Login</a>
      </div>
    </div>
    
    <!-- Reset Password Form -->
    <div id="resetPasswordForm" class="hidden">
      <div class="header">
        <div class="logo">IMACX News</div>
        <div class="subtitle">Set New Password</div>
      </div>
      
      <div id="alertContainer"></div>
      
      <form id="passwordForm">
        <div class="form-group">
          <label for="newPassword">New Password</label>
          <input 
            type="password" 
            id="newPassword" 
            name="newPassword" 
            required 
            minlength="6"
            placeholder="Enter your new password"
          />
          <div class="password-help">Password must be at least 6 characters</div>
        </div>
        
        <div class="form-group">
          <label for="confirmPassword">Confirm New Password</label>
          <input 
            type="password" 
            id="confirmPassword" 
            name="confirmPassword" 
            required 
            minlength="6"
            placeholder="Enter your new password again"
          />
        </div>
        
        <button type="submit" class="submit-btn" id="submitBtn">
          <span class="loading-spinner" id="submitSpinner"></span>
          <span id="submitText">Reset Password</span>
        </button>
      </form>
      
      <div class="back-link">
        <a href="/auth/login">Back to Login</a>
      </div>
    </div>
    
    <!-- Success State -->
    <div id="successState" class="hidden">
      <div class="header">
        <div class="logo">IMACX News</div>
        <div class="subtitle">Password Reset Successful!</div>
      </div>
      
      <div class="alert success">
        üéâ Your password has been successfully reset! You can now log in with your new password.
      </div>
      
      <button class="submit-btn" onclick="window.location.href='/auth/login'">
        Go to Login Page
      </button>
    </div>
  </div>
  
  <script>
    class PasswordResetHandler {
      constructor() {
        this.token = new URLSearchParams(window.location.search).get('token');
        this.init();
      }
      
      async init() {
        if (!this.token) {
          this.showInvalidToken();
          return;
        }
        
        await this.validateToken();
      }
      
      async validateToken() {
        try {
          const response = await fetch(`/api/auth/verify-reset-password?token=${encodeURIComponent(this.token)}`);
          const data = await response.json();
          
          if (data.valid) {
            this.showResetForm();
          } else {
            this.showInvalidToken();
          }
        } catch (error) {
          console.error('Token validation error:', error);
          this.showInvalidToken();
        }
      }
      
      showInvalidToken() {
        document.getElementById('loadingState').classList.add('hidden');
        document.getElementById('invalidTokenState').classList.remove('hidden');
      }
      
      showResetForm() {
        document.getElementById('loadingState').classList.add('hidden');
        document.getElementById('resetPasswordForm').classList.remove('hidden');
        this.setupFormHandlers();
      }
      
      showSuccess() {
        document.getElementById('resetPasswordForm').classList.add('hidden');
        document.getElementById('successState').classList.remove('hidden');
      }
      
      setupFormHandlers() {
        const form = document.getElementById('passwordForm');
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        
        // ÂÆûÊó∂ÂØÜÁ†ÅÂåπÈÖçÈ™åËØÅ
        const validatePasswords = () => {
          const newPassword = newPasswordInput.value;
          const confirmPassword = confirmPasswordInput.value;
          
          if (confirmPassword && newPassword !== confirmPassword) {
            confirmPasswordInput.setCustomValidity('Passwords do not match');
          } else {
            confirmPasswordInput.setCustomValidity('');
          }
        };
        
        newPasswordInput.addEventListener('input', validatePasswords);
        confirmPasswordInput.addEventListener('input', validatePasswords);
        
        form.addEventListener('submit', (e) => this.handleSubmit(e));
      }
      
      async handleSubmit(e) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const newPassword = formData.get('newPassword');
        const confirmPassword = formData.get('confirmPassword');
        
        // Password validation
        if (newPassword.length < 6) {
          this.showAlert('Password must be at least 6 characters', 'error');
          return;
        }
        
        if (newPassword !== confirmPassword) {
          this.showAlert('Passwords do not match', 'error');
          return;
        }
        
        await this.resetPassword(newPassword);
      }
      
      async resetPassword(newPassword) {
        const submitBtn = document.getElementById('submitBtn');
        const submitSpinner = document.getElementById('submitSpinner');
        const submitText = document.getElementById('submitText');
        
        // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
        submitBtn.disabled = true;
        submitSpinner.style.display = 'inline-block';
        submitText.textContent = 'Resetting...';
        
        try {
          const response = await fetch('/api/auth/verify-reset-password', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              token: this.token,
              newPassword: newPassword
            })
          });
          
          const data = await response.json();
          
          if (data.success) {
            this.showSuccess();
          } else {
            this.showAlert(data.error || 'Password reset failed, please try again', 'error');
          }
        } catch (error) {
          console.error('Password reset error:', error);
          this.showAlert('Network error, please check your connection and try again', 'error');
        } finally {
          // ÊÅ¢Â§çÊåâÈíÆÁä∂ÊÄÅ
          submitBtn.disabled = false;
          submitSpinner.style.display = 'none';
          submitText.textContent = 'Reset Password';
        }
      }
      
      showAlert(message, type = 'error') {
        const alertContainer = document.getElementById('alertContainer');
        alertContainer.innerHTML = `
          <div class="alert ${type}">
            ${message}
          </div>
        `;
        
        // ÊªöÂä®Âà∞È°∂ÈÉ®ÊòæÁ§∫ÈîôËØØ
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }
    }
    
    // ÂàùÂßãÂåñÂØÜÁ†ÅÈáçÁΩÆÂ§ÑÁêÜÂô®
    document.addEventListener('DOMContentLoaded', () => {
      new PasswordResetHandler();
    });
  </script>
</body>
</html>

